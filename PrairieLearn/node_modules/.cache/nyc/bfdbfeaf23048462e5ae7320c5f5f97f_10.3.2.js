var cov_sp7mr9u21=function(){var path="/Users/fengyichen/pldev/newfolder/PrairieLearn/public/localscripts/calculationQuestion/PrairieGeom.js",hash="a7a58ca02c620886b18d01313d08c7a805a48226",global=new Function('return this')(),gcv="__coverage__",coverageData={path:"/Users/fengyichen/pldev/newfolder/PrairieLearn/public/localscripts/calculationQuestion/PrairieGeom.js",statementMap:{"0":{start:{line:1,column:0},end:{line:1861,column:73}},"1":{start:{line:2,column:0},end:{line:1859,column:3}},"2":{start:{line:3,column:13},end:{line:3,column:36}},"3":{start:{line:4,column:13},end:{line:4,column:36}},"4":{start:{line:5,column:17},end:{line:5,column:33}},"5":{start:{line:6,column:17},end:{line:6,column:33}},"6":{start:{line:15,column:4},end:{line:15,column:63}},"7":{start:{line:24,column:4},end:{line:26,column:6}},"8":{start:{line:25,column:8},end:{line:25,column:39}},"9":{start:{line:33,column:4},end:{line:35,column:6}},"10":{start:{line:34,column:8},end:{line:34,column:39}},"11":{start:{line:42,column:4},end:{line:48,column:6}},"12":{start:{line:43,column:8},end:{line:44,column:24}},"13":{start:{line:44,column:12},end:{line:44,column:24}},"14":{start:{line:45,column:8},end:{line:46,column:24}},"15":{start:{line:46,column:12},end:{line:46,column:24}},"16":{start:{line:47,column:8},end:{line:47,column:21}},"17":{start:{line:52,column:4},end:{line:67,column:6}},"18":{start:{line:53,column:20},end:{line:53,column:62}},"19":{start:{line:54,column:19},end:{line:54,column:63}},"20":{start:{line:55,column:21},end:{line:55,column:30}},"21":{start:{line:56,column:23},end:{line:56,column:46}},"22":{start:{line:57,column:18},end:{line:57,column:28}},"23":{start:{line:58,column:19},end:{line:58,column:21}},"24":{start:{line:61,column:8},end:{line:62,column:24}},"25":{start:{line:62,column:12},end:{line:62,column:24}},"26":{start:{line:63,column:8},end:{line:64,column:87}},"27":{start:{line:64,column:12},end:{line:64,column:87}},"28":{start:{line:66,column:8},end:{line:66,column:20}},"29":{start:{line:75,column:4},end:{line:77,column:6}},"30":{start:{line:76,column:8},end:{line:76,column:55}},"31":{start:{line:85,column:4},end:{line:89,column:6}},"32":{start:{line:86,column:16},end:{line:86,column:45}},"33":{start:{line:87,column:16},end:{line:87,column:37}},"34":{start:{line:88,column:8},end:{line:88,column:22}},"35":{start:{line:98,column:4},end:{line:100,column:6}},"36":{start:{line:99,column:8},end:{line:99,column:47}},"37":{start:{line:109,column:4},end:{line:111,column:6}},"38":{start:{line:110,column:8},end:{line:110,column:45}},"39":{start:{line:120,column:4},end:{line:126,column:6}},"40":{start:{line:121,column:16},end:{line:121,column:18}},"41":{start:{line:122,column:8},end:{line:124,column:9}},"42":{start:{line:123,column:12},end:{line:123,column:61}},"43":{start:{line:125,column:8},end:{line:125,column:21}},"44":{start:{line:134,column:4},end:{line:136,column:6}},"45":{start:{line:135,column:8},end:{line:135,column:98}},"46":{start:{line:144,column:4},end:{line:146,column:6}},"47":{start:{line:145,column:8},end:{line:145,column:82}},"48":{start:{line:154,column:4},end:{line:159,column:6}},"49":{start:{line:155,column:8},end:{line:156,column:21}},"50":{start:{line:156,column:12},end:{line:156,column:21}},"51":{start:{line:157,column:20},end:{line:157,column:37}},"52":{start:{line:158,column:8},end:{line:158,column:34}},"53":{start:{line:166,column:4},end:{line:172,column:6}},"54":{start:{line:167,column:16},end:{line:167,column:18}},"55":{start:{line:168,column:8},end:{line:170,column:9}},"56":{start:{line:169,column:12},end:{line:169,column:43}},"57":{start:{line:171,column:8},end:{line:171,column:21}},"58":{start:{line:180,column:4},end:{line:182,column:6}},"59":{start:{line:181,column:8},end:{line:181,column:43}},"60":{start:{line:190,column:4},end:{line:197,column:6}},"61":{start:{line:191,column:21},end:{line:192,column:49}},"62":{start:{line:193,column:8},end:{line:195,column:9}},"63":{start:{line:194,column:12},end:{line:194,column:24}},"64":{start:{line:196,column:8},end:{line:196,column:22}},"65":{start:{line:205,column:4},end:{line:243,column:6}},"66":{start:{line:206,column:8},end:{line:208,column:9}},"67":{start:{line:207,column:12},end:{line:207,column:22}},"68":{start:{line:209,column:8},end:{line:211,column:9}},"69":{start:{line:210,column:12},end:{line:210,column:32}},"70":{start:{line:212,column:8},end:{line:214,column:9}},"71":{start:{line:213,column:12},end:{line:213,column:32}},"72":{start:{line:215,column:20},end:{line:215,column:31}},"73":{start:{line:216,column:21},end:{line:216,column:48}},"74":{start:{line:217,column:19},end:{line:217,column:46}},"75":{start:{line:218,column:21},end:{line:218,column:48}},"76":{start:{line:219,column:19},end:{line:219,column:46}},"77":{start:{line:221,column:8},end:{line:226,column:9}},"78":{start:{line:222,column:12},end:{line:222,column:38}},"79":{start:{line:224,column:12},end:{line:225,column:46}},"80":{start:{line:228,column:8},end:{line:232,column:9}},"81":{start:{line:229,column:12},end:{line:229,column:35}},"82":{start:{line:231,column:12},end:{line:231,column:43}},"83":{start:{line:234,column:21},end:{line:234,column:23}},"84":{start:{line:235,column:8},end:{line:241,column:9}},"85":{start:{line:236,column:12},end:{line:236,column:30}},"86":{start:{line:237,column:12},end:{line:237,column:56}},"87":{start:{line:238,column:12},end:{line:240,column:13}},"88":{start:{line:239,column:16},end:{line:239,column:33}},"89":{start:{line:242,column:8},end:{line:242,column:22}},"90":{start:{line:250,column:4},end:{line:255,column:6}},"91":{start:{line:251,column:17},end:{line:253,column:22}},"92":{start:{line:254,column:8},end:{line:254,column:18}},"93":{start:{line:262,column:4},end:{line:269,column:6}},"94":{start:{line:263,column:16},end:{line:263,column:23}},"95":{start:{line:264,column:16},end:{line:264,column:23}},"96":{start:{line:265,column:16},end:{line:265,column:36}},"97":{start:{line:266,column:20},end:{line:266,column:36}},"98":{start:{line:267,column:17},end:{line:267,column:31}},"99":{start:{line:268,column:8},end:{line:268,column:18}},"100":{start:{line:276,column:4},end:{line:281,column:6}},"101":{start:{line:277,column:20},end:{line:277,column:27}},"102":{start:{line:278,column:17},end:{line:278,column:55}},"103":{start:{line:279,column:21},end:{line:279,column:60}},"104":{start:{line:280,column:8},end:{line:280,column:28}},"105":{start:{line:289,column:4},end:{line:295,column:6}},"106":{start:{line:290,column:20},end:{line:290,column:39}},"107":{start:{line:291,column:17},end:{line:291,column:25}},"108":{start:{line:292,column:21},end:{line:292,column:29}},"109":{start:{line:293,column:17},end:{line:293,column:53}},"110":{start:{line:294,column:8},end:{line:294,column:18}},"111":{start:{line:302,column:4},end:{line:308,column:6}},"112":{start:{line:303,column:17},end:{line:306,column:22}},"113":{start:{line:307,column:8},end:{line:307,column:18}},"114":{start:{line:315,column:4},end:{line:324,column:6}},"115":{start:{line:316,column:16},end:{line:316,column:23}},"116":{start:{line:317,column:16},end:{line:317,column:23}},"117":{start:{line:318,column:16},end:{line:318,column:23}},"118":{start:{line:319,column:16},end:{line:319,column:42}},"119":{start:{line:320,column:20},end:{line:320,column:36}},"120":{start:{line:321,column:18},end:{line:321,column:34}},"121":{start:{line:322,column:17},end:{line:322,column:36}},"122":{start:{line:323,column:8},end:{line:323,column:18}},"123":{start:{line:331,column:4},end:{line:340,column:6}},"124":{start:{line:332,column:20},end:{line:332,column:27}},"125":{start:{line:333,column:18},end:{line:333,column:25}},"126":{start:{line:334,column:17},end:{line:334,column:58}},"127":{start:{line:335,column:21},end:{line:335,column:63}},"128":{start:{line:336,column:19},end:{line:338,column:38}},"129":{start:{line:339,column:8},end:{line:339,column:34}},"130":{start:{line:347,column:4},end:{line:352,column:6}},"131":{start:{line:348,column:17},end:{line:350,column:30}},"132":{start:{line:351,column:8},end:{line:351,column:18}},"133":{start:{line:359,column:4},end:{line:367,column:6}},"134":{start:{line:360,column:16},end:{line:360,column:23}},"135":{start:{line:361,column:16},end:{line:361,column:23}},"136":{start:{line:362,column:16},end:{line:362,column:23}},"137":{start:{line:363,column:16},end:{line:363,column:36}},"138":{start:{line:364,column:20},end:{line:364,column:36}},"139":{start:{line:365,column:17},end:{line:365,column:34}},"140":{start:{line:366,column:8},end:{line:366,column:18}},"141":{start:{line:374,column:4},end:{line:380,column:6}},"142":{start:{line:375,column:20},end:{line:375,column:27}},"143":{start:{line:376,column:17},end:{line:376,column:58}},"144":{start:{line:377,column:21},end:{line:377,column:63}},"145":{start:{line:378,column:17},end:{line:378,column:30}},"146":{start:{line:379,column:8},end:{line:379,column:32}},"147":{start:{line:387,column:4},end:{line:389,column:6}},"148":{start:{line:388,column:8},end:{line:388,column:37}},"149":{start:{line:397,column:4},end:{line:403,column:6}},"150":{start:{line:398,column:8},end:{line:402,column:9}},"151":{start:{line:399,column:12},end:{line:399,column:50}},"152":{start:{line:401,column:12},end:{line:401,column:60}},"153":{start:{line:411,column:4},end:{line:413,column:6}},"154":{start:{line:412,column:8},end:{line:412,column:47}},"155":{start:{line:420,column:4},end:{line:436,column:6}},"156":{start:{line:421,column:17},end:{line:421,column:33}},"157":{start:{line:422,column:17},end:{line:422,column:33}},"158":{start:{line:423,column:17},end:{line:423,column:33}},"159":{start:{line:425,column:8},end:{line:427,column:9}},"160":{start:{line:426,column:12},end:{line:426,column:25}},"161":{start:{line:428,column:8},end:{line:430,column:9}},"162":{start:{line:429,column:12},end:{line:429,column:25}},"163":{start:{line:431,column:8},end:{line:433,column:9}},"164":{start:{line:432,column:12},end:{line:432,column:25}},"165":{start:{line:434,column:8},end:{line:434,column:47}},"166":{start:{line:435,column:8},end:{line:435,column:17}},"167":{start:{line:443,column:4},end:{line:445,column:6}},"168":{start:{line:444,column:8},end:{line:444,column:32}},"169":{start:{line:452,column:4},end:{line:456,column:6}},"170":{start:{line:453,column:18},end:{line:453,column:32}},"171":{start:{line:454,column:19},end:{line:454,column:46}},"172":{start:{line:455,column:8},end:{line:455,column:20}},"173":{start:{line:463,column:4},end:{line:478,column:6}},"174":{start:{line:464,column:8},end:{line:476,column:9}},"175":{start:{line:465,column:12},end:{line:465,column:28}},"176":{start:{line:466,column:15},end:{line:476,column:9}},"177":{start:{line:467,column:12},end:{line:467,column:67}},"178":{start:{line:467,column:53},end:{line:467,column:64}},"179":{start:{line:468,column:15},end:{line:476,column:9}},"180":{start:{line:469,column:12},end:{line:469,column:33}},"181":{start:{line:470,column:15},end:{line:476,column:9}},"182":{start:{line:471,column:12},end:{line:472,column:28}},"183":{start:{line:472,column:16},end:{line:472,column:28}},"184":{start:{line:473,column:12},end:{line:475,column:13}},"185":{start:{line:474,column:16},end:{line:474,column:62}},"186":{start:{line:474,column:48},end:{line:474,column:59}},"187":{start:{line:477,column:8},end:{line:477,column:20}},"188":{start:{line:486,column:4},end:{line:490,column:6}},"189":{start:{line:487,column:8},end:{line:488,column:22}},"190":{start:{line:488,column:12},end:{line:488,column:22}},"191":{start:{line:489,column:8},end:{line:489,column:77}},"192":{start:{line:489,column:49},end:{line:489,column:74}},"193":{start:{line:498,column:4},end:{line:502,column:6}},"194":{start:{line:499,column:8},end:{line:500,column:22}},"195":{start:{line:500,column:12},end:{line:500,column:22}},"196":{start:{line:501,column:8},end:{line:501,column:29}},"197":{start:{line:509,column:4},end:{line:517,column:6}},"198":{start:{line:510,column:19},end:{line:510,column:23}},"199":{start:{line:511,column:8},end:{line:516,column:21}},"200":{start:{line:513,column:16},end:{line:513,column:105}},"201":{start:{line:525,column:4},end:{line:531,column:6}},"202":{start:{line:526,column:8},end:{line:530,column:11}},"203":{start:{line:527,column:12},end:{line:529,column:15}},"204":{start:{line:528,column:16},end:{line:528,column:28}},"205":{start:{line:539,column:4},end:{line:541,column:6}},"206":{start:{line:540,column:8},end:{line:540,column:58}},"207":{start:{line:540,column:43},end:{line:540,column:55}},"208":{start:{line:551,column:4},end:{line:574,column:6}},"209":{start:{line:552,column:24},end:{line:552,column:26}},"210":{start:{line:552,column:37},end:{line:552,column:39}},"211":{start:{line:552,column:52},end:{line:552,column:54}},"212":{start:{line:553,column:8},end:{line:560,column:11}},"213":{start:{line:554,column:12},end:{line:559,column:13}},"214":{start:{line:555,column:16},end:{line:555,column:34}},"215":{start:{line:556,column:16},end:{line:556,column:37}},"216":{start:{line:558,column:16},end:{line:558,column:33}},"217":{start:{line:561,column:23},end:{line:561,column:58}},"218":{start:{line:562,column:22},end:{line:562,column:56}},"219":{start:{line:563,column:23},end:{line:563,column:70}},"220":{start:{line:565,column:8},end:{line:566,column:24}},"221":{start:{line:566,column:12},end:{line:566,column:24}},"222":{start:{line:567,column:17},end:{line:567,column:36}},"223":{start:{line:568,column:16},end:{line:568,column:45}},"224":{start:{line:570,column:18},end:{line:570,column:41}},"225":{start:{line:571,column:8},end:{line:571,column:62}},"226":{start:{line:571,column:43},end:{line:571,column:59}},"227":{start:{line:573,column:8},end:{line:573,column:19}},"228":{start:{line:583,column:4},end:{line:589,column:6}},"229":{start:{line:584,column:19},end:{line:584,column:43}},"230":{start:{line:585,column:16},end:{line:585,column:32}},"231":{start:{line:586,column:16},end:{line:586,column:39}},"232":{start:{line:587,column:8},end:{line:587,column:42}},"233":{start:{line:588,column:8},end:{line:588,column:17}},"234":{start:{line:596,column:4},end:{line:615,column:6}},"235":{start:{line:597,column:19},end:{line:597,column:33}},"236":{start:{line:598,column:19},end:{line:598,column:33}},"237":{start:{line:599,column:19},end:{line:599,column:33}},"238":{start:{line:600,column:19},end:{line:600,column:33}},"239":{start:{line:601,column:8},end:{line:606,column:9}},"240":{start:{line:602,column:12},end:{line:602,column:50}},"241":{start:{line:603,column:12},end:{line:603,column:50}},"242":{start:{line:604,column:12},end:{line:604,column:50}},"243":{start:{line:605,column:12},end:{line:605,column:50}},"244":{start:{line:607,column:8},end:{line:614,column:10}},"245":{start:{line:624,column:4},end:{line:632,column:6}},"246":{start:{line:625,column:16},end:{line:625,column:37}},"247":{start:{line:626,column:21},end:{line:626,column:25}},"248":{start:{line:627,column:8},end:{line:630,column:9}},"249":{start:{line:628,column:12},end:{line:629,column:31}},"250":{start:{line:629,column:16},end:{line:629,column:31}},"251":{start:{line:631,column:8},end:{line:631,column:22}},"252":{start:{line:641,column:4},end:{line:647,column:6}},"253":{start:{line:642,column:24},end:{line:642,column:28}},"254":{start:{line:643,column:8},end:{line:645,column:9}},"255":{start:{line:644,column:12},end:{line:644,column:85}},"256":{start:{line:646,column:8},end:{line:646,column:25}},"257":{start:{line:654,column:4},end:{line:674,column:6}},"258":{start:{line:655,column:8},end:{line:656,column:44}},"259":{start:{line:656,column:12},end:{line:656,column:44}},"260":{start:{line:658,column:8},end:{line:669,column:9}},"261":{start:{line:659,column:12},end:{line:668,column:13}},"262":{start:{line:660,column:16},end:{line:660,column:60}},"263":{start:{line:661,column:16},end:{line:667,column:17}},"264":{start:{line:662,column:20},end:{line:662,column:32}},"265":{start:{line:663,column:20},end:{line:663,column:32}},"266":{start:{line:665,column:20},end:{line:665,column:51}},"267":{start:{line:666,column:20},end:{line:666,column:51}},"268":{start:{line:670,column:8},end:{line:673,column:10}},"269":{start:{line:684,column:4},end:{line:716,column:6}},"270":{start:{line:686,column:8},end:{line:690,column:9}},"271":{start:{line:687,column:22},end:{line:687,column:24}},"272":{start:{line:688,column:12},end:{line:688,column:20}},"273":{start:{line:689,column:12},end:{line:689,column:21}},"274":{start:{line:692,column:16},end:{line:692,column:31}},"275":{start:{line:693,column:16},end:{line:693,column:31}},"276":{start:{line:694,column:20},end:{line:694,column:32}},"277":{start:{line:695,column:20},end:{line:695,column:32}},"278":{start:{line:696,column:8},end:{line:712,column:9}},"279":{start:{line:698,column:12},end:{line:698,column:66}},"280":{start:{line:701,column:25},end:{line:701,column:59}},"281":{start:{line:702,column:12},end:{line:711,column:13}},"282":{start:{line:704,column:16},end:{line:704,column:82}},"283":{start:{line:707,column:24},end:{line:707,column:58}},"284":{start:{line:709,column:25},end:{line:709,column:88}},"285":{start:{line:710,column:16},end:{line:710,column:69}},"286":{start:{line:713,column:8},end:{line:714,column:21}},"287":{start:{line:714,column:12},end:{line:714,column:21}},"288":{start:{line:715,column:8},end:{line:715,column:20}},"289":{start:{line:724,column:4},end:{line:726,column:6}},"290":{start:{line:725,column:8},end:{line:725,column:27}},"291":{start:{line:734,column:4},end:{line:736,column:6}},"292":{start:{line:735,column:8},end:{line:735,column:86}},"293":{start:{line:744,column:4},end:{line:746,column:6}},"294":{start:{line:745,column:8},end:{line:745,column:86}},"295":{start:{line:754,column:4},end:{line:756,column:6}},"296":{start:{line:755,column:8},end:{line:755,column:52}},"297":{start:{line:769,column:4},end:{line:784,column:6}},"298":{start:{line:770,column:21},end:{line:770,column:42}},"299":{start:{line:771,column:21},end:{line:771,column:42}},"300":{start:{line:772,column:23},end:{line:772,column:42}},"301":{start:{line:773,column:23},end:{line:773,column:42}},"302":{start:{line:775,column:21},end:{line:775,column:60}},"303":{start:{line:776,column:20},end:{line:776,column:54}},"304":{start:{line:778,column:27},end:{line:778,column:36}},"305":{start:{line:779,column:8},end:{line:779,column:69}},"306":{start:{line:780,column:8},end:{line:780,column:65}},"307":{start:{line:781,column:8},end:{line:781,column:79}},"308":{start:{line:782,column:8},end:{line:782,column:75}},"309":{start:{line:783,column:8},end:{line:783,column:28}},"310":{start:{line:794,column:4},end:{line:797,column:6}},"311":{start:{line:795,column:17},end:{line:795,column:57}},"312":{start:{line:796,column:8},end:{line:796,column:38}},"313":{start:{line:805,column:4},end:{line:808,column:6}},"314":{start:{line:806,column:17},end:{line:806,column:57}},"315":{start:{line:807,column:8},end:{line:807,column:38}},"316":{start:{line:816,column:4},end:{line:818,column:6}},"317":{start:{line:817,column:8},end:{line:817,column:27}},"318":{start:{line:826,column:4},end:{line:828,column:6}},"319":{start:{line:827,column:8},end:{line:827,column:101}},"320":{start:{line:836,column:4},end:{line:838,column:6}},"321":{start:{line:837,column:8},end:{line:837,column:119}},"322":{start:{line:845,column:4},end:{line:854,column:6}},"323":{start:{line:846,column:17},end:{line:846,column:38}},"324":{start:{line:847,column:17},end:{line:847,column:38}},"325":{start:{line:848,column:17},end:{line:848,column:38}},"326":{start:{line:849,column:8},end:{line:849,column:19}},"327":{start:{line:850,column:8},end:{line:850,column:19}},"328":{start:{line:851,column:8},end:{line:851,column:19}},"329":{start:{line:852,column:17},end:{line:852,column:29}},"330":{start:{line:853,column:8},end:{line:853,column:36}},"331":{start:{line:862,column:4},end:{line:864,column:6}},"332":{start:{line:863,column:8},end:{line:863,column:64}},"333":{start:{line:872,column:4},end:{line:874,column:6}},"334":{start:{line:873,column:8},end:{line:873,column:64}},"335":{start:{line:882,column:4},end:{line:884,column:6}},"336":{start:{line:883,column:8},end:{line:883,column:64}},"337":{start:{line:894,column:4},end:{line:896,column:6}},"338":{start:{line:895,column:8},end:{line:895,column:124}},"339":{start:{line:906,column:4},end:{line:909,column:6}},"340":{start:{line:907,column:17},end:{line:907,column:67}},"341":{start:{line:908,column:8},end:{line:908,column:47}},"342":{start:{line:917,column:4},end:{line:920,column:6}},"343":{start:{line:918,column:17},end:{line:918,column:67}},"344":{start:{line:919,column:8},end:{line:919,column:47}},"345":{start:{line:927,column:4},end:{line:929,column:6}},"346":{start:{line:928,column:8},end:{line:928,column:40}},"347":{start:{line:938,column:4},end:{line:940,column:6}},"348":{start:{line:939,column:8},end:{line:939,column:38}},"349":{start:{line:948,column:4},end:{line:950,column:6}},"350":{start:{line:949,column:8},end:{line:949,column:56}},"351":{start:{line:958,column:4},end:{line:960,column:6}},"352":{start:{line:959,column:8},end:{line:959,column:53}},"353":{start:{line:967,column:4},end:{line:969,column:6}},"354":{start:{line:968,column:8},end:{line:968,column:54}},"355":{start:{line:976,column:4},end:{line:982,column:6}},"356":{start:{line:977,column:16},end:{line:977,column:46}},"357":{start:{line:978,column:8},end:{line:980,column:9}},"358":{start:{line:979,column:12},end:{line:979,column:32}},"359":{start:{line:981,column:8},end:{line:981,column:17}},"360":{start:{line:990,column:4},end:{line:992,column:6}},"361":{start:{line:991,column:8},end:{line:991,column:55}},"362":{start:{line:999,column:4},end:{line:1013,column:6}},"363":{start:{line:1000,column:18},end:{line:1000,column:55}},"364":{start:{line:1001,column:8},end:{line:1001,column:36}},"365":{start:{line:1002,column:30},end:{line:1011,column:9}},"366":{start:{line:1012,column:8},end:{line:1012,column:36}},"367":{start:{line:1022,column:4},end:{line:1029,column:6}},"368":{start:{line:1023,column:8},end:{line:1028,column:9}},"369":{start:{line:1024,column:20},end:{line:1024,column:68}},"370":{start:{line:1025,column:12},end:{line:1025,column:21}},"371":{start:{line:1027,column:12},end:{line:1027,column:21}},"372":{start:{line:1038,column:4},end:{line:1041,column:6}},"373":{start:{line:1039,column:16},end:{line:1039,column:66}},"374":{start:{line:1040,column:8},end:{line:1040,column:17}},"375":{start:{line:1048,column:4},end:{line:1056,column:6}},"376":{start:{line:1049,column:8},end:{line:1055,column:9}},"377":{start:{line:1050,column:12},end:{line:1050,column:21}},"378":{start:{line:1051,column:15},end:{line:1055,column:9}},"379":{start:{line:1052,column:12},end:{line:1052,column:22}},"380":{start:{line:1054,column:12},end:{line:1054,column:21}},"381":{start:{line:1065,column:4},end:{line:1067,column:6}},"382":{start:{line:1066,column:8},end:{line:1066,column:45}},"383":{start:{line:1076,column:4},end:{line:1078,column:6}},"384":{start:{line:1077,column:8},end:{line:1077,column:63}},"385":{start:{line:1087,column:4},end:{line:1089,column:6}},"386":{start:{line:1088,column:8},end:{line:1088,column:36}},"387":{start:{line:1100,column:4},end:{line:1102,column:6}},"388":{start:{line:1101,column:8},end:{line:1101,column:73}},"389":{start:{line:1111,column:4},end:{line:1113,column:6}},"390":{start:{line:1112,column:8},end:{line:1112,column:48}},"391":{start:{line:1122,column:4},end:{line:1124,column:6}},"392":{start:{line:1123,column:8},end:{line:1123,column:68}},"393":{start:{line:1133,column:4},end:{line:1139,column:6}},"394":{start:{line:1134,column:23},end:{line:1134,column:25}},"395":{start:{line:1135,column:8},end:{line:1137,column:9}},"396":{start:{line:1136,column:12},end:{line:1136,column:66}},"397":{start:{line:1138,column:8},end:{line:1138,column:24}},"398":{start:{line:1148,column:4},end:{line:1154,column:6}},"399":{start:{line:1149,column:23},end:{line:1149,column:25}},"400":{start:{line:1150,column:8},end:{line:1152,column:9}},"401":{start:{line:1151,column:12},end:{line:1151,column:65}},"402":{start:{line:1153,column:8},end:{line:1153,column:24}},"403":{start:{line:1161,column:4},end:{line:1167,column:6}},"404":{start:{line:1162,column:23},end:{line:1162,column:25}},"405":{start:{line:1163,column:8},end:{line:1165,column:9}},"406":{start:{line:1164,column:12},end:{line:1164,column:35}},"407":{start:{line:1166,column:8},end:{line:1166,column:24}},"408":{start:{line:1180,column:4},end:{line:1185,column:6}},"409":{start:{line:1181,column:8},end:{line:1184,column:39}},"410":{start:{line:1196,column:4},end:{line:1203,column:6}},"411":{start:{line:1197,column:17},end:{line:1197,column:32}},"412":{start:{line:1198,column:17},end:{line:1198,column:32}},"413":{start:{line:1199,column:17},end:{line:1199,column:32}},"414":{start:{line:1200,column:8},end:{line:1202,column:43}},"415":{start:{line:1214,column:4},end:{line:1218,column:6}},"416":{start:{line:1215,column:17},end:{line:1215,column:45}},"417":{start:{line:1216,column:17},end:{line:1216,column:45}},"418":{start:{line:1217,column:8},end:{line:1217,column:50}},"419":{start:{line:1222,column:4},end:{line:1243,column:6}},"420":{start:{line:1223,column:18},end:{line:1223,column:22}},"421":{start:{line:1225,column:17},end:{line:1225,column:27}},"422":{start:{line:1226,column:17},end:{line:1226,column:21}},"423":{start:{line:1227,column:17},end:{line:1227,column:27}},"424":{start:{line:1228,column:16},end:{line:1228,column:18}},"425":{start:{line:1229,column:8},end:{line:1229,column:20}},"426":{start:{line:1230,column:8},end:{line:1230,column:21}},"427":{start:{line:1231,column:8},end:{line:1241,column:9}},"428":{start:{line:1232,column:12},end:{line:1240,column:13}},"429":{start:{line:1233,column:16},end:{line:1233,column:29}},"430":{start:{line:1234,column:16},end:{line:1234,column:61}},"431":{start:{line:1235,column:16},end:{line:1235,column:86}},"432":{start:{line:1237,column:16},end:{line:1237,column:29}},"433":{start:{line:1238,column:16},end:{line:1238,column:50}},"434":{start:{line:1239,column:16},end:{line:1239,column:71}},"435":{start:{line:1242,column:8},end:{line:1242,column:17}},"436":{start:{line:1257,column:4},end:{line:1274,column:6}},"437":{start:{line:1258,column:16},end:{line:1258,column:46}},"438":{start:{line:1259,column:20},end:{line:1259,column:45}},"439":{start:{line:1260,column:20},end:{line:1260,column:45}},"440":{start:{line:1261,column:8},end:{line:1273,column:9}},"441":{start:{line:1262,column:12},end:{line:1266,column:13}},"442":{start:{line:1263,column:16},end:{line:1263,column:47}},"443":{start:{line:1265,column:16},end:{line:1265,column:47}},"444":{start:{line:1268,column:12},end:{line:1272,column:13}},"445":{start:{line:1269,column:16},end:{line:1269,column:47}},"446":{start:{line:1271,column:16},end:{line:1271,column:47}},"447":{start:{line:1283,column:4},end:{line:1293,column:6}},"448":{start:{line:1284,column:21},end:{line:1284,column:23}},"449":{start:{line:1285,column:8},end:{line:1287,column:9}},"450":{start:{line:1286,column:12},end:{line:1286,column:19}},"451":{start:{line:1288,column:8},end:{line:1288,column:37}},"452":{start:{line:1289,column:8},end:{line:1291,column:9}},"453":{start:{line:1290,column:12},end:{line:1290,column:52}},"454":{start:{line:1292,column:8},end:{line:1292,column:22}},"455":{start:{line:1301,column:4},end:{line:1309,column:6}},"456":{start:{line:1302,column:19},end:{line:1302,column:42}},"457":{start:{line:1303,column:24},end:{line:1303,column:26}},"458":{start:{line:1304,column:8},end:{line:1307,column:9}},"459":{start:{line:1305,column:12},end:{line:1305,column:64}},"460":{start:{line:1306,column:12},end:{line:1306,column:49}},"461":{start:{line:1308,column:8},end:{line:1308,column:25}},"462":{start:{line:1317,column:4},end:{line:1323,column:6}},"463":{start:{line:1318,column:24},end:{line:1318,column:26}},"464":{start:{line:1319,column:8},end:{line:1321,column:9}},"465":{start:{line:1320,column:12},end:{line:1320,column:50}},"466":{start:{line:1322,column:8},end:{line:1322,column:25}},"467":{start:{line:1331,column:4},end:{line:1338,column:6}},"468":{start:{line:1332,column:24},end:{line:1332,column:26}},"469":{start:{line:1333,column:8},end:{line:1336,column:9}},"470":{start:{line:1334,column:12},end:{line:1334,column:79}},"471":{start:{line:1335,column:12},end:{line:1335,column:30}},"472":{start:{line:1337,column:8},end:{line:1337,column:25}},"473":{start:{line:1346,column:4},end:{line:1355,column:6}},"474":{start:{line:1347,column:8},end:{line:1347,column:34}},"475":{start:{line:1348,column:8},end:{line:1353,column:9}},"476":{start:{line:1350,column:12},end:{line:1352,column:33}},"477":{start:{line:1354,column:8},end:{line:1354,column:26}},"478":{start:{line:1365,column:4},end:{line:1371,column:6}},"479":{start:{line:1366,column:19},end:{line:1366,column:20}},"480":{start:{line:1367,column:8},end:{line:1369,column:9}},"481":{start:{line:1368,column:12},end:{line:1368,column:42}},"482":{start:{line:1370,column:8},end:{line:1370,column:17}},"483":{start:{line:1379,column:4},end:{line:1385,column:6}},"484":{start:{line:1380,column:24},end:{line:1380,column:26}},"485":{start:{line:1381,column:8},end:{line:1383,column:9}},"486":{start:{line:1382,column:12},end:{line:1382,column:56}},"487":{start:{line:1384,column:8},end:{line:1384,column:22}},"488":{start:{line:1392,column:4},end:{line:1401,column:6}},"489":{start:{line:1393,column:19},end:{line:1393,column:21}},"490":{start:{line:1394,column:8},end:{line:1396,column:9}},"491":{start:{line:1395,column:12},end:{line:1395,column:23}},"492":{start:{line:1397,column:8},end:{line:1399,column:9}},"493":{start:{line:1398,column:12},end:{line:1398,column:32}},"494":{start:{line:1400,column:8},end:{line:1400,column:17}},"495":{start:{line:1408,column:4},end:{line:1414,column:6}},"496":{start:{line:1409,column:24},end:{line:1409,column:26}},"497":{start:{line:1410,column:8},end:{line:1412,column:9}},"498":{start:{line:1411,column:12},end:{line:1411,column:53}},"499":{start:{line:1413,column:8},end:{line:1413,column:22}},"500":{start:{line:1421,column:4},end:{line:1427,column:6}},"501":{start:{line:1422,column:19},end:{line:1422,column:22}},"502":{start:{line:1423,column:8},end:{line:1425,column:9}},"503":{start:{line:1424,column:12},end:{line:1424,column:38}},"504":{start:{line:1426,column:8},end:{line:1426,column:17}},"505":{start:{line:1434,column:4},end:{line:1440,column:6}},"506":{start:{line:1435,column:24},end:{line:1435,column:26}},"507":{start:{line:1436,column:8},end:{line:1438,column:9}},"508":{start:{line:1437,column:12},end:{line:1437,column:52}},"509":{start:{line:1439,column:8},end:{line:1439,column:22}},"510":{start:{line:1448,column:4},end:{line:1456,column:6}},"511":{start:{line:1449,column:16},end:{line:1449,column:18}},"512":{start:{line:1450,column:8},end:{line:1451,column:22}},"513":{start:{line:1451,column:12},end:{line:1451,column:22}},"514":{start:{line:1452,column:8},end:{line:1454,column:48}},"515":{start:{line:1453,column:12},end:{line:1454,column:48}},"516":{start:{line:1454,column:16},end:{line:1454,column:48}},"517":{start:{line:1455,column:8},end:{line:1455,column:17}},"518":{start:{line:1466,column:4},end:{line:1468,column:6}},"519":{start:{line:1467,column:8},end:{line:1467,column:49}},"520":{start:{line:1475,column:4},end:{line:1480,column:6}},"521":{start:{line:1476,column:8},end:{line:1479,column:10}},"522":{start:{line:1487,column:4},end:{line:1492,column:6}},"523":{start:{line:1488,column:8},end:{line:1491,column:10}},"524":{start:{line:1502,column:4},end:{line:1508,column:6}},"525":{start:{line:1503,column:8},end:{line:1507,column:9}},"526":{start:{line:1504,column:12},end:{line:1504,column:56}},"527":{start:{line:1506,column:12},end:{line:1506,column:56}},"528":{start:{line:1515,column:4},end:{line:1529,column:6}},"529":{start:{line:1516,column:8},end:{line:1528,column:9}},"530":{start:{line:1517,column:12},end:{line:1521,column:14}},"531":{start:{line:1523,column:12},end:{line:1527,column:14}},"532":{start:{line:1536,column:4},end:{line:1550,column:6}},"533":{start:{line:1537,column:8},end:{line:1549,column:9}},"534":{start:{line:1538,column:12},end:{line:1542,column:14}},"535":{start:{line:1544,column:12},end:{line:1548,column:14}},"536":{start:{line:1560,column:4},end:{line:1567,column:6}},"537":{start:{line:1562,column:8},end:{line:1566,column:9}},"538":{start:{line:1563,column:21},end:{line:1563,column:55}},"539":{start:{line:1564,column:20},end:{line:1564,column:53}},"540":{start:{line:1565,column:21},end:{line:1565,column:55}},"541":{start:{line:1574,column:4},end:{line:1581,column:6}},"542":{start:{line:1576,column:8},end:{line:1580,column:9}},"543":{start:{line:1577,column:21},end:{line:1577,column:73}},"544":{start:{line:1578,column:20},end:{line:1578,column:70}},"545":{start:{line:1579,column:21},end:{line:1579,column:73}},"546":{start:{line:1588,column:4},end:{line:1595,column:6}},"547":{start:{line:1590,column:8},end:{line:1594,column:9}},"548":{start:{line:1591,column:21},end:{line:1591,column:72}},"549":{start:{line:1592,column:20},end:{line:1592,column:69}},"550":{start:{line:1593,column:21},end:{line:1593,column:72}},"551":{start:{line:1605,column:4},end:{line:1611,column:6}},"552":{start:{line:1606,column:19},end:{line:1606,column:21}},"553":{start:{line:1607,column:8},end:{line:1609,column:9}},"554":{start:{line:1608,column:12},end:{line:1608,column:47}},"555":{start:{line:1610,column:8},end:{line:1610,column:20}},"556":{start:{line:1618,column:4},end:{line:1624,column:6}},"557":{start:{line:1619,column:19},end:{line:1619,column:21}},"558":{start:{line:1620,column:8},end:{line:1622,column:9}},"559":{start:{line:1621,column:12},end:{line:1621,column:44}},"560":{start:{line:1623,column:8},end:{line:1623,column:20}},"561":{start:{line:1634,column:4},end:{line:1636,column:6}},"562":{start:{line:1635,column:8},end:{line:1635,column:39}},"563":{start:{line:1644,column:4},end:{line:1646,column:6}},"564":{start:{line:1645,column:8},end:{line:1645,column:60}},"565":{start:{line:1654,column:4},end:{line:1656,column:6}},"566":{start:{line:1655,column:8},end:{line:1655,column:64}},"567":{start:{line:1664,column:4},end:{line:1681,column:6}},"568":{start:{line:1665,column:8},end:{line:1680,column:9}},"569":{start:{line:1666,column:24},end:{line:1666,column:35}},"570":{start:{line:1667,column:12},end:{line:1671,column:13}},"571":{start:{line:1668,column:16},end:{line:1668,column:39}},"572":{start:{line:1670,column:16},end:{line:1670,column:49}},"573":{start:{line:1672,column:15},end:{line:1680,column:9}},"574":{start:{line:1673,column:24},end:{line:1673,column:25}},"575":{start:{line:1674,column:12},end:{line:1676,column:13}},"576":{start:{line:1675,column:16},end:{line:1675,column:77}},"577":{start:{line:1677,column:12},end:{line:1677,column:25}},"578":{start:{line:1679,column:12},end:{line:1679,column:21}},"579":{start:{line:1689,column:4},end:{line:1695,column:6}},"580":{start:{line:1690,column:16},end:{line:1690,column:79}},"581":{start:{line:1691,column:8},end:{line:1693,column:20}},"582":{start:{line:1692,column:12},end:{line:1693,column:20}},"583":{start:{line:1693,column:16},end:{line:1693,column:20}},"584":{start:{line:1694,column:8},end:{line:1694,column:17}},"585":{start:{line:1703,column:4},end:{line:1716,column:6}},"586":{start:{line:1704,column:20},end:{line:1704,column:21}},"587":{start:{line:1704,column:32},end:{line:1704,column:33}},"588":{start:{line:1704,column:44},end:{line:1704,column:45}},"589":{start:{line:1705,column:8},end:{line:1712,column:9}},"590":{start:{line:1706,column:12},end:{line:1709,column:25}},"591":{start:{line:1707,column:16},end:{line:1707,column:24}},"592":{start:{line:1709,column:16},end:{line:1709,column:25}},"593":{start:{line:1710,column:12},end:{line:1711,column:25}},"594":{start:{line:1711,column:16},end:{line:1711,column:25}},"595":{start:{line:1713,column:21},end:{line:1713,column:57}},"596":{start:{line:1714,column:20},end:{line:1714,column:57}},"597":{start:{line:1715,column:8},end:{line:1715,column:21}},"598":{start:{line:1723,column:4},end:{line:1738,column:6}},"599":{start:{line:1724,column:19},end:{line:1724,column:23}},"600":{start:{line:1725,column:8},end:{line:1737,column:9}},"601":{start:{line:1726,column:12},end:{line:1726,column:33}},"602":{start:{line:1727,column:15},end:{line:1737,column:9}},"603":{start:{line:1728,column:12},end:{line:1728,column:81}},"604":{start:{line:1728,column:57},end:{line:1728,column:77}},"605":{start:{line:1729,column:15},end:{line:1737,column:9}},"606":{start:{line:1730,column:12},end:{line:1730,column:33}},"607":{start:{line:1731,column:15},end:{line:1737,column:9}},"608":{start:{line:1732,column:12},end:{line:1733,column:29}},"609":{start:{line:1733,column:16},end:{line:1733,column:29}},"610":{start:{line:1734,column:12},end:{line:1734,column:81}},"611":{start:{line:1734,column:57},end:{line:1734,column:77}},"612":{start:{line:1736,column:12},end:{line:1736,column:28}},"613":{start:{line:1746,column:4},end:{line:1783,column:6}},"614":{start:{line:1747,column:19},end:{line:1747,column:23}},"615":{start:{line:1749,column:8},end:{line:1782,column:9}},"616":{start:{line:1750,column:12},end:{line:1750,column:42}},"617":{start:{line:1751,column:12},end:{line:1751,column:46}},"618":{start:{line:1752,column:15},end:{line:1782,column:9}},"619":{start:{line:1753,column:12},end:{line:1758,column:32}},"620":{start:{line:1754,column:16},end:{line:1754,column:38}},"621":{start:{line:1755,column:17},end:{line:1758,column:32}},"622":{start:{line:1756,column:16},end:{line:1756,column:51}},"623":{start:{line:1758,column:16},end:{line:1758,column:32}},"624":{start:{line:1759,column:12},end:{line:1759,column:55}},"625":{start:{line:1760,column:15},end:{line:1782,column:9}},"626":{start:{line:1761,column:12},end:{line:1761,column:42}},"627":{start:{line:1762,column:12},end:{line:1762,column:55}},"628":{start:{line:1763,column:15},end:{line:1782,column:9}},"629":{start:{line:1764,column:12},end:{line:1765,column:32}},"630":{start:{line:1765,column:16},end:{line:1765,column:32}},"631":{start:{line:1766,column:12},end:{line:1767,column:32}},"632":{start:{line:1767,column:16},end:{line:1767,column:32}},"633":{start:{line:1768,column:12},end:{line:1768,column:119}},"634":{start:{line:1768,column:82},end:{line:1768,column:115}},"635":{start:{line:1769,column:15},end:{line:1782,column:9}},"636":{start:{line:1770,column:12},end:{line:1770,column:34}},"637":{start:{line:1771,column:12},end:{line:1772,column:36}},"638":{start:{line:1772,column:16},end:{line:1772,column:36}},"639":{start:{line:1773,column:12},end:{line:1774,column:32}},"640":{start:{line:1774,column:16},end:{line:1774,column:32}},"641":{start:{line:1775,column:12},end:{line:1775,column:54}},"642":{start:{line:1776,column:15},end:{line:1782,column:9}},"643":{start:{line:1777,column:12},end:{line:1778,column:32}},"644":{start:{line:1778,column:16},end:{line:1778,column:32}},"645":{start:{line:1779,column:12},end:{line:1779,column:117}},"646":{start:{line:1779,column:68},end:{line:1779,column:113}},"647":{start:{line:1781,column:12},end:{line:1781,column:28}},"648":{start:{line:1791,column:4},end:{line:1801,column:6}},"649":{start:{line:1792,column:23},end:{line:1792,column:59}},"650":{start:{line:1793,column:19},end:{line:1793,column:37}},"651":{start:{line:1794,column:8},end:{line:1799,column:9}},"652":{start:{line:1795,column:12},end:{line:1798,column:32}},"653":{start:{line:1796,column:16},end:{line:1796,column:25}},"654":{start:{line:1798,column:16},end:{line:1798,column:32}},"655":{start:{line:1800,column:8},end:{line:1800,column:31}},"656":{start:{line:1811,column:4},end:{line:1854,column:6}},"657":{start:{line:1812,column:19},end:{line:1812,column:23}},"658":{start:{line:1814,column:8},end:{line:1853,column:9}},"659":{start:{line:1815,column:12},end:{line:1815,column:42}},"660":{start:{line:1816,column:12},end:{line:1817,column:28}},"661":{start:{line:1817,column:16},end:{line:1817,column:28}},"662":{start:{line:1818,column:12},end:{line:1818,column:25}},"663":{start:{line:1819,column:15},end:{line:1853,column:9}},"664":{start:{line:1820,column:12},end:{line:1825,column:29}},"665":{start:{line:1821,column:16},end:{line:1821,column:38}},"666":{start:{line:1822,column:17},end:{line:1825,column:29}},"667":{start:{line:1823,column:16},end:{line:1823,column:51}},"668":{start:{line:1825,column:16},end:{line:1825,column:29}},"669":{start:{line:1826,column:12},end:{line:1826,column:38}},"670":{start:{line:1827,column:15},end:{line:1853,column:9}},"671":{start:{line:1828,column:12},end:{line:1828,column:42}},"672":{start:{line:1829,column:12},end:{line:1829,column:38}},"673":{start:{line:1830,column:15},end:{line:1853,column:9}},"674":{start:{line:1831,column:12},end:{line:1832,column:29}},"675":{start:{line:1832,column:16},end:{line:1832,column:29}},"676":{start:{line:1833,column:12},end:{line:1834,column:29}},"677":{start:{line:1834,column:16},end:{line:1834,column:29}},"678":{start:{line:1835,column:12},end:{line:1836,column:28}},"679":{start:{line:1836,column:16},end:{line:1836,column:28}},"680":{start:{line:1837,column:12},end:{line:1837,column:25}},"681":{start:{line:1838,column:15},end:{line:1853,column:9}},"682":{start:{line:1839,column:12},end:{line:1839,column:34}},"683":{start:{line:1840,column:12},end:{line:1841,column:36}},"684":{start:{line:1841,column:16},end:{line:1841,column:36}},"685":{start:{line:1842,column:12},end:{line:1843,column:29}},"686":{start:{line:1843,column:16},end:{line:1843,column:29}},"687":{start:{line:1844,column:12},end:{line:1845,column:28}},"688":{start:{line:1845,column:16},end:{line:1845,column:28}},"689":{start:{line:1846,column:12},end:{line:1846,column:25}},"690":{start:{line:1847,column:15},end:{line:1853,column:9}},"691":{start:{line:1848,column:12},end:{line:1849,column:29}},"692":{start:{line:1849,column:16},end:{line:1849,column:29}},"693":{start:{line:1850,column:12},end:{line:1850,column:122}},"694":{start:{line:1850,column:56},end:{line:1850,column:119}},"695":{start:{line:1852,column:12},end:{line:1852,column:25}},"696":{start:{line:1858,column:4},end:{line:1858,column:29}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:1,column:1},end:{line:1,column:2}},loc:{start:{line:1,column:39},end:{line:1861,column:1}},line:1},"1":{name:"(anonymous_1)",decl:{start:{line:2,column:47},end:{line:2,column:48}},loc:{start:{line:2,column:79},end:{line:1859,column:1}},line:2},"2":{name:"PrairieGeom",decl:{start:{line:8,column:13},end:{line:8,column:24}},loc:{start:{line:8,column:27},end:{line:9,column:5}},line:8},"3":{name:"(anonymous_3)",decl:{start:{line:24,column:37},end:{line:24,column:38}},loc:{start:{line:24,column:55},end:{line:26,column:5}},line:24},"4":{name:"(anonymous_4)",decl:{start:{line:33,column:37},end:{line:33,column:38}},loc:{start:{line:33,column:55},end:{line:35,column:5}},line:33},"5":{name:"(anonymous_5)",decl:{start:{line:42,column:35},end:{line:42,column:36}},loc:{start:{line:42,column:47},end:{line:48,column:5}},line:42},"6":{name:"(anonymous_6)",decl:{start:{line:52,column:38},end:{line:52,column:39}},loc:{start:{line:52,column:69},end:{line:67,column:5}},line:52},"7":{name:"(anonymous_7)",decl:{start:{line:75,column:37},end:{line:75,column:38}},loc:{start:{line:75,column:62},end:{line:77,column:5}},line:75},"8":{name:"(anonymous_8)",decl:{start:{line:85,column:40},end:{line:85,column:41}},loc:{start:{line:85,column:65},end:{line:89,column:5}},line:85},"9":{name:"(anonymous_9)",decl:{start:{line:98,column:40},end:{line:98,column:41}},loc:{start:{line:98,column:58},end:{line:100,column:5}},line:98},"10":{name:"(anonymous_10)",decl:{start:{line:109,column:40},end:{line:109,column:41}},loc:{start:{line:109,column:58},end:{line:111,column:5}},line:109},"11":{name:"(anonymous_11)",decl:{start:{line:120,column:46},end:{line:120,column:47}},loc:{start:{line:120,column:64},end:{line:126,column:5}},line:120},"12":{name:"(anonymous_12)",decl:{start:{line:134,column:44},end:{line:134,column:45}},loc:{start:{line:134,column:61},end:{line:136,column:5}},line:134},"13":{name:"(anonymous_13)",decl:{start:{line:144,column:47},end:{line:144,column:48}},loc:{start:{line:144,column:64},end:{line:146,column:5}},line:144},"14":{name:"(anonymous_14)",decl:{start:{line:154,column:32},end:{line:154,column:33}},loc:{start:{line:154,column:47},end:{line:159,column:5}},line:154},"15":{name:"(anonymous_15)",decl:{start:{line:166,column:40},end:{line:166,column:41}},loc:{start:{line:166,column:52},end:{line:172,column:5}},line:166},"16":{name:"(anonymous_16)",decl:{start:{line:180,column:33},end:{line:180,column:34}},loc:{start:{line:180,column:51},end:{line:182,column:5}},line:180},"17":{name:"(anonymous_17)",decl:{start:{line:190,column:47},end:{line:190,column:48}},loc:{start:{line:190,column:68},end:{line:197,column:5}},line:190},"18":{name:"(anonymous_18)",decl:{start:{line:205,column:49},end:{line:205,column:50}},loc:{start:{line:205,column:66},end:{line:243,column:5}},line:205},"19":{name:"(anonymous_19)",decl:{start:{line:250,column:40},end:{line:250,column:41}},loc:{start:{line:250,column:53},end:{line:255,column:5}},line:250},"20":{name:"(anonymous_20)",decl:{start:{line:262,column:40},end:{line:262,column:41}},loc:{start:{line:262,column:53},end:{line:269,column:5}},line:262},"21":{name:"(anonymous_21)",decl:{start:{line:276,column:39},end:{line:276,column:40}},loc:{start:{line:276,column:52},end:{line:281,column:5}},line:276},"22":{name:"(anonymous_22)",decl:{start:{line:289,column:43},end:{line:289,column:44}},loc:{start:{line:289,column:60},end:{line:295,column:5}},line:289},"23":{name:"(anonymous_23)",decl:{start:{line:302,column:44},end:{line:302,column:45}},loc:{start:{line:302,column:57},end:{line:308,column:5}},line:302},"24":{name:"(anonymous_24)",decl:{start:{line:315,column:44},end:{line:315,column:45}},loc:{start:{line:315,column:57},end:{line:324,column:5}},line:315},"25":{name:"(anonymous_25)",decl:{start:{line:331,column:43},end:{line:331,column:44}},loc:{start:{line:331,column:56},end:{line:340,column:5}},line:331},"26":{name:"(anonymous_26)",decl:{start:{line:347,column:46},end:{line:347,column:47}},loc:{start:{line:347,column:59},end:{line:352,column:5}},line:347},"27":{name:"(anonymous_27)",decl:{start:{line:359,column:46},end:{line:359,column:47}},loc:{start:{line:359,column:59},end:{line:367,column:5}},line:359},"28":{name:"(anonymous_28)",decl:{start:{line:374,column:45},end:{line:374,column:46}},loc:{start:{line:374,column:58},end:{line:380,column:5}},line:374},"29":{name:"(anonymous_29)",decl:{start:{line:387,column:33},end:{line:387,column:34}},loc:{start:{line:387,column:45},end:{line:389,column:5}},line:387},"30":{name:"(anonymous_30)",decl:{start:{line:397,column:37},end:{line:397,column:38}},loc:{start:{line:397,column:52},end:{line:403,column:5}},line:397},"31":{name:"(anonymous_31)",decl:{start:{line:411,column:37},end:{line:411,column:38}},loc:{start:{line:411,column:52},end:{line:413,column:5}},line:411},"32":{name:"(anonymous_32)",decl:{start:{line:420,column:42},end:{line:420,column:43}},loc:{start:{line:420,column:54},end:{line:436,column:5}},line:420},"33":{name:"(anonymous_33)",decl:{start:{line:443,column:41},end:{line:443,column:42}},loc:{start:{line:443,column:53},end:{line:445,column:5}},line:443},"34":{name:"(anonymous_34)",decl:{start:{line:452,column:33},end:{line:452,column:34}},loc:{start:{line:452,column:45},end:{line:456,column:5}},line:452},"35":{name:"(anonymous_35)",decl:{start:{line:463,column:42},end:{line:463,column:43}},loc:{start:{line:463,column:57},end:{line:478,column:5}},line:463},"36":{name:"(anonymous_36)",decl:{start:{line:467,column:40},end:{line:467,column:41}},loc:{start:{line:467,column:52},end:{line:467,column:65}},line:467},"37":{name:"(anonymous_37)",decl:{start:{line:474,column:35},end:{line:474,column:36}},loc:{start:{line:474,column:47},end:{line:474,column:60}},line:474},"38":{name:"(anonymous_38)",decl:{start:{line:486,column:43},end:{line:486,column:44}},loc:{start:{line:486,column:60},end:{line:490,column:5}},line:486},"39":{name:"(anonymous_39)",decl:{start:{line:489,column:36},end:{line:489,column:37}},loc:{start:{line:489,column:48},end:{line:489,column:75}},line:489},"40":{name:"(anonymous_40)",decl:{start:{line:498,column:43},end:{line:498,column:44}},loc:{start:{line:498,column:60},end:{line:502,column:5}},line:498},"41":{name:"(anonymous_41)",decl:{start:{line:509,column:43},end:{line:509,column:44}},loc:{start:{line:509,column:60},end:{line:517,column:5}},line:509},"42":{name:"(anonymous_42)",decl:{start:{line:512,column:17},end:{line:512,column:18}},loc:{start:{line:512,column:29},end:{line:514,column:13}},line:512},"43":{name:"(anonymous_43)",decl:{start:{line:525,column:43},end:{line:525,column:44}},loc:{start:{line:525,column:64},end:{line:531,column:5}},line:525},"44":{name:"(anonymous_44)",decl:{start:{line:526,column:24},end:{line:526,column:25}},loc:{start:{line:526,column:36},end:{line:530,column:9}},line:526},"45":{name:"(anonymous_45)",decl:{start:{line:527,column:34},end:{line:527,column:35}},loc:{start:{line:527,column:46},end:{line:529,column:13}},line:527},"46":{name:"(anonymous_46)",decl:{start:{line:539,column:42},end:{line:539,column:43}},loc:{start:{line:539,column:63},end:{line:541,column:5}},line:539},"47":{name:"(anonymous_47)",decl:{start:{line:540,column:30},end:{line:540,column:31}},loc:{start:{line:540,column:42},end:{line:540,column:56}},line:540},"48":{name:"(anonymous_48)",decl:{start:{line:551,column:47},end:{line:551,column:48}},loc:{start:{line:551,column:83},end:{line:574,column:5}},line:551},"49":{name:"(anonymous_49)",decl:{start:{line:553,column:26},end:{line:553,column:27}},loc:{start:{line:553,column:41},end:{line:560,column:9}},line:553},"50":{name:"(anonymous_50)",decl:{start:{line:571,column:25},end:{line:571,column:26}},loc:{start:{line:571,column:42},end:{line:571,column:60}},line:571},"51":{name:"(anonymous_51)",decl:{start:{line:583,column:40},end:{line:583,column:41}},loc:{start:{line:583,column:58},end:{line:589,column:5}},line:583},"52":{name:"(anonymous_52)",decl:{start:{line:596,column:42},end:{line:596,column:43}},loc:{start:{line:596,column:59},end:{line:615,column:5}},line:596},"53":{name:"(anonymous_53)",decl:{start:{line:624,column:46},end:{line:624,column:47}},loc:{start:{line:624,column:76},end:{line:632,column:5}},line:624},"54":{name:"(anonymous_54)",decl:{start:{line:641,column:49},end:{line:641,column:50}},loc:{start:{line:641,column:80},end:{line:647,column:5}},line:641},"55":{name:"(anonymous_55)",decl:{start:{line:654,column:42},end:{line:654,column:43}},loc:{start:{line:654,column:59},end:{line:674,column:5}},line:654},"56":{name:"(anonymous_56)",decl:{start:{line:684,column:46},end:{line:684,column:47}},loc:{start:{line:684,column:71},end:{line:716,column:5}},line:684},"57":{name:"(anonymous_57)",decl:{start:{line:724,column:46},end:{line:724,column:47}},loc:{start:{line:724,column:57},end:{line:726,column:5}},line:724},"58":{name:"(anonymous_58)",decl:{start:{line:734,column:43},end:{line:734,column:44}},loc:{start:{line:734,column:71},end:{line:736,column:5}},line:734},"59":{name:"(anonymous_59)",decl:{start:{line:744,column:47},end:{line:744,column:48}},loc:{start:{line:744,column:75},end:{line:746,column:5}},line:744},"60":{name:"(anonymous_60)",decl:{start:{line:754,column:44},end:{line:754,column:45}},loc:{start:{line:754,column:71},end:{line:756,column:5}},line:754},"61":{name:"(anonymous_61)",decl:{start:{line:769,column:55},end:{line:769,column:56}},loc:{start:{line:769,column:99},end:{line:784,column:5}},line:769},"62":{name:"(anonymous_62)",decl:{start:{line:794,column:41},end:{line:794,column:42}},loc:{start:{line:794,column:66},end:{line:797,column:5}},line:794},"63":{name:"(anonymous_63)",decl:{start:{line:805,column:41},end:{line:805,column:42}},loc:{start:{line:805,column:66},end:{line:808,column:5}},line:805},"64":{name:"(anonymous_64)",decl:{start:{line:816,column:48},end:{line:816,column:49}},loc:{start:{line:816,column:59},end:{line:818,column:5}},line:816},"65":{name:"(anonymous_65)",decl:{start:{line:826,column:45},end:{line:826,column:46}},loc:{start:{line:826,column:73},end:{line:828,column:5}},line:826},"66":{name:"(anonymous_66)",decl:{start:{line:836,column:49},end:{line:836,column:50}},loc:{start:{line:836,column:77},end:{line:838,column:5}},line:836},"67":{name:"(anonymous_67)",decl:{start:{line:845,column:33},end:{line:845,column:34}},loc:{start:{line:845,column:49},end:{line:854,column:5}},line:845},"68":{name:"(anonymous_68)",decl:{start:{line:862,column:47},end:{line:862,column:48}},loc:{start:{line:862,column:75},end:{line:864,column:5}},line:862},"69":{name:"(anonymous_69)",decl:{start:{line:872,column:47},end:{line:872,column:48}},loc:{start:{line:872,column:75},end:{line:874,column:5}},line:872},"70":{name:"(anonymous_70)",decl:{start:{line:882,column:47},end:{line:882,column:48}},loc:{start:{line:882,column:75},end:{line:884,column:5}},line:882},"71":{name:"(anonymous_71)",decl:{start:{line:894,column:46},end:{line:894,column:47}},loc:{start:{line:894,column:90},end:{line:896,column:5}},line:894},"72":{name:"(anonymous_72)",decl:{start:{line:906,column:43},end:{line:906,column:44}},loc:{start:{line:906,column:68},end:{line:909,column:5}},line:906},"73":{name:"(anonymous_73)",decl:{start:{line:917,column:43},end:{line:917,column:44}},loc:{start:{line:917,column:68},end:{line:920,column:5}},line:917},"74":{name:"(anonymous_74)",decl:{start:{line:927,column:42},end:{line:927,column:43}},loc:{start:{line:927,column:56},end:{line:929,column:5}},line:927},"75":{name:"(anonymous_75)",decl:{start:{line:938,column:36},end:{line:938,column:37}},loc:{start:{line:938,column:53},end:{line:940,column:5}},line:938},"76":{name:"(anonymous_76)",decl:{start:{line:948,column:36},end:{line:948,column:37}},loc:{start:{line:948,column:56},end:{line:950,column:5}},line:948},"77":{name:"(anonymous_77)",decl:{start:{line:958,column:39},end:{line:958,column:40}},loc:{start:{line:958,column:56},end:{line:960,column:5}},line:958},"78":{name:"(anonymous_78)",decl:{start:{line:967,column:44},end:{line:967,column:45}},loc:{start:{line:967,column:60},end:{line:969,column:5}},line:967},"79":{name:"(anonymous_79)",decl:{start:{line:976,column:36},end:{line:976,column:37}},loc:{start:{line:976,column:50},end:{line:982,column:5}},line:976},"80":{name:"(anonymous_80)",decl:{start:{line:990,column:38},end:{line:990,column:39}},loc:{start:{line:990,column:59},end:{line:992,column:5}},line:990},"81":{name:"(anonymous_81)",decl:{start:{line:999,column:43},end:{line:999,column:44}},loc:{start:{line:999,column:59},end:{line:1013,column:5}},line:999},"82":{name:"(anonymous_82)",decl:{start:{line:1022,column:40},end:{line:1022,column:41}},loc:{start:{line:1022,column:58},end:{line:1029,column:5}},line:1022},"83":{name:"(anonymous_83)",decl:{start:{line:1038,column:41},end:{line:1038,column:42}},loc:{start:{line:1038,column:59},end:{line:1041,column:5}},line:1038},"84":{name:"(anonymous_84)",decl:{start:{line:1048,column:33},end:{line:1048,column:34}},loc:{start:{line:1048,column:45},end:{line:1056,column:5}},line:1048},"85":{name:"(anonymous_85)",decl:{start:{line:1065,column:41},end:{line:1065,column:42}},loc:{start:{line:1065,column:65},end:{line:1067,column:5}},line:1065},"86":{name:"(anonymous_86)",decl:{start:{line:1076,column:44},end:{line:1076,column:45}},loc:{start:{line:1076,column:68},end:{line:1078,column:5}},line:1076},"87":{name:"(anonymous_87)",decl:{start:{line:1087,column:43},end:{line:1087,column:44}},loc:{start:{line:1087,column:63},end:{line:1089,column:5}},line:1087},"88":{name:"(anonymous_88)",decl:{start:{line:1100,column:38},end:{line:1100,column:39}},loc:{start:{line:1100,column:66},end:{line:1102,column:5}},line:1100},"89":{name:"(anonymous_89)",decl:{start:{line:1111,column:47},end:{line:1111,column:48}},loc:{start:{line:1111,column:71},end:{line:1113,column:5}},line:1111},"90":{name:"(anonymous_90)",decl:{start:{line:1122,column:50},end:{line:1122,column:51}},loc:{start:{line:1122,column:74},end:{line:1124,column:5}},line:1122},"91":{name:"(anonymous_91)",decl:{start:{line:1133,column:46},end:{line:1133,column:47}},loc:{start:{line:1133,column:70},end:{line:1139,column:5}},line:1133},"92":{name:"(anonymous_92)",decl:{start:{line:1148,column:46},end:{line:1148,column:47}},loc:{start:{line:1148,column:70},end:{line:1154,column:5}},line:1148},"93":{name:"(anonymous_93)",decl:{start:{line:1161,column:37},end:{line:1161,column:38}},loc:{start:{line:1161,column:53},end:{line:1167,column:5}},line:1161},"94":{name:"(anonymous_94)",decl:{start:{line:1180,column:43},end:{line:1180,column:44}},loc:{start:{line:1180,column:71},end:{line:1185,column:5}},line:1180},"95":{name:"(anonymous_95)",decl:{start:{line:1196,column:43},end:{line:1196,column:44}},loc:{start:{line:1196,column:71},end:{line:1203,column:5}},line:1196},"96":{name:"(anonymous_96)",decl:{start:{line:1214,column:43},end:{line:1214,column:44}},loc:{start:{line:1214,column:71},end:{line:1218,column:5}},line:1214},"97":{name:"(anonymous_97)",decl:{start:{line:1222,column:36},end:{line:1222,column:37}},loc:{start:{line:1222,column:51},end:{line:1243,column:5}},line:1222},"98":{name:"(anonymous_98)",decl:{start:{line:1257,column:41},end:{line:1257,column:42}},loc:{start:{line:1257,column:78},end:{line:1274,column:5}},line:1257},"99":{name:"(anonymous_99)",decl:{start:{line:1283,column:43},end:{line:1283,column:44}},loc:{start:{line:1283,column:61},end:{line:1293,column:5}},line:1283},"100":{name:"(anonymous_100)",decl:{start:{line:1301,column:41},end:{line:1301,column:42}},loc:{start:{line:1301,column:65},end:{line:1309,column:5}},line:1301},"101":{name:"(anonymous_101)",decl:{start:{line:1317,column:44},end:{line:1317,column:45}},loc:{start:{line:1317,column:69},end:{line:1323,column:5}},line:1317},"102":{name:"(anonymous_102)",decl:{start:{line:1331,column:40},end:{line:1331,column:41}},loc:{start:{line:1331,column:64},end:{line:1338,column:5}},line:1331},"103":{name:"(anonymous_103)",decl:{start:{line:1346,column:40},end:{line:1346,column:41}},loc:{start:{line:1346,column:77},end:{line:1355,column:5}},line:1346},"104":{name:"(anonymous_104)",decl:{start:{line:1365,column:37},end:{line:1365,column:38}},loc:{start:{line:1365,column:55},end:{line:1371,column:5}},line:1365},"105":{name:"(anonymous_105)",decl:{start:{line:1379,column:42},end:{line:1379,column:43}},loc:{start:{line:1379,column:65},end:{line:1385,column:5}},line:1379},"106":{name:"(anonymous_106)",decl:{start:{line:1392,column:37},end:{line:1392,column:38}},loc:{start:{line:1392,column:52},end:{line:1401,column:5}},line:1392},"107":{name:"(anonymous_107)",decl:{start:{line:1408,column:42},end:{line:1408,column:43}},loc:{start:{line:1408,column:62},end:{line:1414,column:5}},line:1408},"108":{name:"(anonymous_108)",decl:{start:{line:1421,column:36},end:{line:1421,column:37}},loc:{start:{line:1421,column:51},end:{line:1427,column:5}},line:1421},"109":{name:"(anonymous_109)",decl:{start:{line:1434,column:41},end:{line:1434,column:42}},loc:{start:{line:1434,column:61},end:{line:1440,column:5}},line:1434},"110":{name:"(anonymous_110)",decl:{start:{line:1448,column:37},end:{line:1448,column:38}},loc:{start:{line:1448,column:60},end:{line:1456,column:5}},line:1448},"111":{name:"(anonymous_111)",decl:{start:{line:1466,column:36},end:{line:1466,column:37}},loc:{start:{line:1466,column:53},end:{line:1468,column:5}},line:1466},"112":{name:"(anonymous_112)",decl:{start:{line:1475,column:36},end:{line:1475,column:37}},loc:{start:{line:1475,column:50},end:{line:1480,column:5}},line:1475},"113":{name:"(anonymous_113)",decl:{start:{line:1487,column:35},end:{line:1487,column:36}},loc:{start:{line:1487,column:49},end:{line:1492,column:5}},line:1487},"114":{name:"(anonymous_114)",decl:{start:{line:1502,column:37},end:{line:1502,column:38}},loc:{start:{line:1502,column:55},end:{line:1508,column:5}},line:1502},"115":{name:"(anonymous_115)",decl:{start:{line:1515,column:37},end:{line:1515,column:38}},loc:{start:{line:1515,column:52},end:{line:1529,column:5}},line:1515},"116":{name:"(anonymous_116)",decl:{start:{line:1536,column:36},end:{line:1536,column:37}},loc:{start:{line:1536,column:51},end:{line:1550,column:5}},line:1536},"117":{name:"(anonymous_117)",decl:{start:{line:1560,column:36},end:{line:1560,column:37}},loc:{start:{line:1560,column:53},end:{line:1567,column:5}},line:1560},"118":{name:"(anonymous_118)",decl:{start:{line:1574,column:36},end:{line:1574,column:37}},loc:{start:{line:1574,column:50},end:{line:1581,column:5}},line:1574},"119":{name:"(anonymous_119)",decl:{start:{line:1588,column:35},end:{line:1588,column:36}},loc:{start:{line:1588,column:49},end:{line:1595,column:5}},line:1588},"120":{name:"(anonymous_120)",decl:{start:{line:1605,column:41},end:{line:1605,column:42}},loc:{start:{line:1605,column:58},end:{line:1611,column:5}},line:1605},"121":{name:"(anonymous_121)",decl:{start:{line:1618,column:41},end:{line:1618,column:42}},loc:{start:{line:1618,column:55},end:{line:1624,column:5}},line:1618},"122":{name:"(anonymous_122)",decl:{start:{line:1634,column:39},end:{line:1634,column:40}},loc:{start:{line:1634,column:63},end:{line:1636,column:5}},line:1634},"123":{name:"(anonymous_123)",decl:{start:{line:1644,column:37},end:{line:1644,column:38}},loc:{start:{line:1644,column:61},end:{line:1646,column:5}},line:1644},"124":{name:"(anonymous_124)",decl:{start:{line:1654,column:40},end:{line:1654,column:41}},loc:{start:{line:1654,column:64},end:{line:1656,column:5}},line:1654},"125":{name:"(anonymous_125)",decl:{start:{line:1664,column:41},end:{line:1664,column:42}},loc:{start:{line:1664,column:62},end:{line:1681,column:5}},line:1664},"126":{name:"(anonymous_126)",decl:{start:{line:1689,column:44},end:{line:1689,column:45}},loc:{start:{line:1689,column:61},end:{line:1695,column:5}},line:1689},"127":{name:"(anonymous_127)",decl:{start:{line:1703,column:41},end:{line:1703,column:42}},loc:{start:{line:1703,column:75},end:{line:1716,column:5}},line:1703},"128":{name:"(anonymous_128)",decl:{start:{line:1723,column:33},end:{line:1723,column:34}},loc:{start:{line:1723,column:47},end:{line:1738,column:5}},line:1723},"129":{name:"(anonymous_129)",decl:{start:{line:1728,column:44},end:{line:1728,column:45}},loc:{start:{line:1728,column:56},end:{line:1728,column:78}},line:1728},"130":{name:"(anonymous_130)",decl:{start:{line:1734,column:44},end:{line:1734,column:45}},loc:{start:{line:1734,column:56},end:{line:1734,column:78}},line:1734},"131":{name:"(anonymous_131)",decl:{start:{line:1746,column:37},end:{line:1746,column:38}},loc:{start:{line:1746,column:69},end:{line:1783,column:5}},line:1746},"132":{name:"(anonymous_132)",decl:{start:{line:1768,column:69},end:{line:1768,column:70}},loc:{start:{line:1768,column:81},end:{line:1768,column:116}},line:1768},"133":{name:"(anonymous_133)",decl:{start:{line:1779,column:48},end:{line:1779,column:49}},loc:{start:{line:1779,column:67},end:{line:1779,column:114}},line:1779},"134":{name:"(anonymous_134)",decl:{start:{line:1791,column:37},end:{line:1791,column:38}},loc:{start:{line:1791,column:69},end:{line:1801,column:5}},line:1791},"135":{name:"(anonymous_135)",decl:{start:{line:1811,column:39},end:{line:1811,column:40}},loc:{start:{line:1811,column:87},end:{line:1854,column:5}},line:1811},"136":{name:"(anonymous_136)",decl:{start:{line:1850,column:36},end:{line:1850,column:37}},loc:{start:{line:1850,column:55},end:{line:1850,column:120}},line:1850}},branchMap:{"0":{loc:{start:{line:43,column:8},end:{line:44,column:24}},type:"if",locations:[{start:{line:43,column:8},end:{line:44,column:24}},{start:{line:43,column:8},end:{line:44,column:24}}],line:43},"1":{loc:{start:{line:45,column:8},end:{line:46,column:24}},type:"if",locations:[{start:{line:45,column:8},end:{line:46,column:24}},{start:{line:45,column:8},end:{line:46,column:24}}],line:45},"2":{loc:{start:{line:53,column:20},end:{line:53,column:62}},type:"cond-expr",locations:[{start:{line:53,column:42},end:{line:53,column:45}},{start:{line:53,column:48},end:{line:53,column:62}}],line:53},"3":{loc:{start:{line:54,column:19},end:{line:54,column:63}},type:"cond-expr",locations:[{start:{line:54,column:42},end:{line:54,column:46}},{start:{line:54,column:49},end:{line:54,column:63}}],line:54},"4":{loc:{start:{line:55,column:21},end:{line:55,column:30}},type:"binary-expr",locations:[{start:{line:55,column:21},end:{line:55,column:25}},{start:{line:55,column:29},end:{line:55,column:30}}],line:55},"5":{loc:{start:{line:155,column:8},end:{line:156,column:21}},type:"if",locations:[{start:{line:155,column:8},end:{line:156,column:21}},{start:{line:155,column:8},end:{line:156,column:21}}],line:155},"6":{loc:{start:{line:193,column:8},end:{line:195,column:9}},type:"if",locations:[{start:{line:193,column:8},end:{line:195,column:9}},{start:{line:193,column:8},end:{line:195,column:9}}],line:193},"7":{loc:{start:{line:206,column:8},end:{line:208,column:9}},type:"if",locations:[{start:{line:206,column:8},end:{line:208,column:9}},{start:{line:206,column:8},end:{line:208,column:9}}],line:206},"8":{loc:{start:{line:206,column:12},end:{line:206,column:46}},type:"binary-expr",locations:[{start:{line:206,column:12},end:{line:206,column:27}},{start:{line:206,column:31},end:{line:206,column:46}}],line:206},"9":{loc:{start:{line:209,column:8},end:{line:211,column:9}},type:"if",locations:[{start:{line:209,column:8},end:{line:211,column:9}},{start:{line:209,column:8},end:{line:211,column:9}}],line:209},"10":{loc:{start:{line:212,column:8},end:{line:214,column:9}},type:"if",locations:[{start:{line:212,column:8},end:{line:214,column:9}},{start:{line:212,column:8},end:{line:214,column:9}}],line:212},"11":{loc:{start:{line:221,column:8},end:{line:226,column:9}},type:"if",locations:[{start:{line:221,column:8},end:{line:226,column:9}},{start:{line:221,column:8},end:{line:226,column:9}}],line:221},"12":{loc:{start:{line:228,column:8},end:{line:232,column:9}},type:"if",locations:[{start:{line:228,column:8},end:{line:232,column:9}},{start:{line:228,column:8},end:{line:232,column:9}}],line:228},"13":{loc:{start:{line:238,column:12},end:{line:240,column:13}},type:"if",locations:[{start:{line:238,column:12},end:{line:240,column:13}},{start:{line:238,column:12},end:{line:240,column:13}}],line:238},"14":{loc:{start:{line:398,column:8},end:{line:402,column:9}},type:"if",locations:[{start:{line:398,column:8},end:{line:402,column:9}},{start:{line:398,column:8},end:{line:402,column:9}}],line:398},"15":{loc:{start:{line:425,column:8},end:{line:427,column:9}},type:"if",locations:[{start:{line:425,column:8},end:{line:427,column:9}},{start:{line:425,column:8},end:{line:427,column:9}}],line:425},"16":{loc:{start:{line:428,column:8},end:{line:430,column:9}},type:"if",locations:[{start:{line:428,column:8},end:{line:430,column:9}},{start:{line:428,column:8},end:{line:430,column:9}}],line:428},"17":{loc:{start:{line:431,column:8},end:{line:433,column:9}},type:"if",locations:[{start:{line:431,column:8},end:{line:433,column:9}},{start:{line:431,column:8},end:{line:433,column:9}}],line:431},"18":{loc:{start:{line:464,column:8},end:{line:476,column:9}},type:"if",locations:[{start:{line:464,column:8},end:{line:476,column:9}},{start:{line:464,column:8},end:{line:476,column:9}}],line:464},"19":{loc:{start:{line:466,column:15},end:{line:476,column:9}},type:"if",locations:[{start:{line:466,column:15},end:{line:476,column:9}},{start:{line:466,column:15},end:{line:476,column:9}}],line:466},"20":{loc:{start:{line:468,column:15},end:{line:476,column:9}},type:"if",locations:[{start:{line:468,column:15},end:{line:476,column:9}},{start:{line:468,column:15},end:{line:476,column:9}}],line:468},"21":{loc:{start:{line:470,column:15},end:{line:476,column:9}},type:"if",locations:[{start:{line:470,column:15},end:{line:476,column:9}},{start:{line:470,column:15},end:{line:476,column:9}}],line:470},"22":{loc:{start:{line:471,column:12},end:{line:472,column:28}},type:"if",locations:[{start:{line:471,column:12},end:{line:472,column:28}},{start:{line:471,column:12},end:{line:472,column:28}}],line:471},"23":{loc:{start:{line:473,column:12},end:{line:475,column:13}},type:"if",locations:[{start:{line:473,column:12},end:{line:475,column:13}},{start:{line:473,column:12},end:{line:475,column:13}}],line:473},"24":{loc:{start:{line:487,column:8},end:{line:488,column:22}},type:"if",locations:[{start:{line:487,column:8},end:{line:488,column:22}},{start:{line:487,column:8},end:{line:488,column:22}}],line:487},"25":{loc:{start:{line:499,column:8},end:{line:500,column:22}},type:"if",locations:[{start:{line:499,column:8},end:{line:500,column:22}},{start:{line:499,column:8},end:{line:500,column:22}}],line:499},"26":{loc:{start:{line:554,column:12},end:{line:559,column:13}},type:"if",locations:[{start:{line:554,column:12},end:{line:559,column:13}},{start:{line:554,column:12},end:{line:559,column:13}}],line:554},"27":{loc:{start:{line:565,column:8},end:{line:566,column:24}},type:"if",locations:[{start:{line:565,column:8},end:{line:566,column:24}},{start:{line:565,column:8},end:{line:566,column:24}}],line:565},"28":{loc:{start:{line:628,column:12},end:{line:629,column:31}},type:"if",locations:[{start:{line:628,column:12},end:{line:629,column:31}},{start:{line:628,column:12},end:{line:629,column:31}}],line:628},"29":{loc:{start:{line:628,column:16},end:{line:628,column:66}},type:"binary-expr",locations:[{start:{line:628,column:16},end:{line:628,column:39}},{start:{line:628,column:43},end:{line:628,column:66}}],line:628},"30":{loc:{start:{line:644,column:24},end:{line:644,column:84}},type:"binary-expr",locations:[{start:{line:644,column:24},end:{line:644,column:33}},{start:{line:644,column:37},end:{line:644,column:84}}],line:644},"31":{loc:{start:{line:655,column:8},end:{line:656,column:44}},type:"if",locations:[{start:{line:655,column:8},end:{line:656,column:44}},{start:{line:655,column:8},end:{line:656,column:44}}],line:655},"32":{loc:{start:{line:661,column:16},end:{line:667,column:17}},type:"if",locations:[{start:{line:661,column:16},end:{line:667,column:17}},{start:{line:661,column:16},end:{line:667,column:17}}],line:661},"33":{loc:{start:{line:661,column:20},end:{line:661,column:38}},type:"binary-expr",locations:[{start:{line:661,column:20},end:{line:661,column:27}},{start:{line:661,column:31},end:{line:661,column:38}}],line:661},"34":{loc:{start:{line:686,column:8},end:{line:690,column:9}},type:"if",locations:[{start:{line:686,column:8},end:{line:690,column:9}},{start:{line:686,column:8},end:{line:690,column:9}}],line:686},"35":{loc:{start:{line:696,column:8},end:{line:712,column:9}},type:"if",locations:[{start:{line:696,column:8},end:{line:712,column:9}},{start:{line:696,column:8},end:{line:712,column:9}}],line:696},"36":{loc:{start:{line:702,column:12},end:{line:711,column:13}},type:"if",locations:[{start:{line:702,column:12},end:{line:711,column:13}},{start:{line:702,column:12},end:{line:711,column:13}}],line:702},"37":{loc:{start:{line:709,column:25},end:{line:709,column:88}},type:"cond-expr",locations:[{start:{line:709,column:81},end:{line:709,column:83}},{start:{line:709,column:86},end:{line:709,column:88}}],line:709},"38":{loc:{start:{line:713,column:8},end:{line:714,column:21}},type:"if",locations:[{start:{line:713,column:8},end:{line:714,column:21}},{start:{line:713,column:8},end:{line:714,column:21}}],line:713},"39":{loc:{start:{line:978,column:8},end:{line:980,column:9}},type:"if",locations:[{start:{line:978,column:8},end:{line:980,column:9}},{start:{line:978,column:8},end:{line:980,column:9}}],line:978},"40":{loc:{start:{line:1023,column:8},end:{line:1028,column:9}},type:"if",locations:[{start:{line:1023,column:8},end:{line:1028,column:9}},{start:{line:1023,column:8},end:{line:1028,column:9}}],line:1023},"41":{loc:{start:{line:1023,column:12},end:{line:1023,column:26}},type:"binary-expr",locations:[{start:{line:1023,column:12},end:{line:1023,column:17}},{start:{line:1023,column:21},end:{line:1023,column:26}}],line:1023},"42":{loc:{start:{line:1049,column:8},end:{line:1055,column:9}},type:"if",locations:[{start:{line:1049,column:8},end:{line:1055,column:9}},{start:{line:1049,column:8},end:{line:1055,column:9}}],line:1049},"43":{loc:{start:{line:1051,column:15},end:{line:1055,column:9}},type:"if",locations:[{start:{line:1051,column:15},end:{line:1055,column:9}},{start:{line:1051,column:15},end:{line:1055,column:9}}],line:1051},"44":{loc:{start:{line:1232,column:12},end:{line:1240,column:13}},type:"if",locations:[{start:{line:1232,column:12},end:{line:1240,column:13}},{start:{line:1232,column:12},end:{line:1240,column:13}}],line:1232},"45":{loc:{start:{line:1261,column:8},end:{line:1273,column:9}},type:"if",locations:[{start:{line:1261,column:8},end:{line:1273,column:9}},{start:{line:1261,column:8},end:{line:1273,column:9}}],line:1261},"46":{loc:{start:{line:1262,column:12},end:{line:1266,column:13}},type:"if",locations:[{start:{line:1262,column:12},end:{line:1266,column:13}},{start:{line:1262,column:12},end:{line:1266,column:13}}],line:1262},"47":{loc:{start:{line:1268,column:12},end:{line:1272,column:13}},type:"if",locations:[{start:{line:1268,column:12},end:{line:1272,column:13}},{start:{line:1268,column:12},end:{line:1272,column:13}}],line:1268},"48":{loc:{start:{line:1285,column:8},end:{line:1287,column:9}},type:"if",locations:[{start:{line:1285,column:8},end:{line:1287,column:9}},{start:{line:1285,column:8},end:{line:1287,column:9}}],line:1285},"49":{loc:{start:{line:1394,column:8},end:{line:1396,column:9}},type:"if",locations:[{start:{line:1394,column:8},end:{line:1396,column:9}},{start:{line:1394,column:8},end:{line:1396,column:9}}],line:1394},"50":{loc:{start:{line:1503,column:8},end:{line:1507,column:9}},type:"if",locations:[{start:{line:1503,column:8},end:{line:1507,column:9}},{start:{line:1503,column:8},end:{line:1507,column:9}}],line:1503},"51":{loc:{start:{line:1516,column:8},end:{line:1528,column:9}},type:"if",locations:[{start:{line:1516,column:8},end:{line:1528,column:9}},{start:{line:1516,column:8},end:{line:1528,column:9}}],line:1516},"52":{loc:{start:{line:1537,column:8},end:{line:1549,column:9}},type:"if",locations:[{start:{line:1537,column:8},end:{line:1549,column:9}},{start:{line:1537,column:8},end:{line:1549,column:9}}],line:1537},"53":{loc:{start:{line:1562,column:8},end:{line:1566,column:9}},type:"switch",locations:[{start:{line:1563,column:8},end:{line:1563,column:55}},{start:{line:1564,column:8},end:{line:1564,column:53}},{start:{line:1565,column:8},end:{line:1565,column:55}}],line:1562},"54":{loc:{start:{line:1576,column:8},end:{line:1580,column:9}},type:"switch",locations:[{start:{line:1577,column:8},end:{line:1577,column:73}},{start:{line:1578,column:8},end:{line:1578,column:70}},{start:{line:1579,column:8},end:{line:1579,column:73}}],line:1576},"55":{loc:{start:{line:1590,column:8},end:{line:1594,column:9}},type:"switch",locations:[{start:{line:1591,column:8},end:{line:1591,column:72}},{start:{line:1592,column:8},end:{line:1592,column:69}},{start:{line:1593,column:8},end:{line:1593,column:72}}],line:1590},"56":{loc:{start:{line:1665,column:8},end:{line:1680,column:9}},type:"if",locations:[{start:{line:1665,column:8},end:{line:1680,column:9}},{start:{line:1665,column:8},end:{line:1680,column:9}}],line:1665},"57":{loc:{start:{line:1665,column:12},end:{line:1665,column:48}},type:"binary-expr",locations:[{start:{line:1665,column:12},end:{line:1665,column:29}},{start:{line:1665,column:33},end:{line:1665,column:48}}],line:1665},"58":{loc:{start:{line:1667,column:12},end:{line:1671,column:13}},type:"if",locations:[{start:{line:1667,column:12},end:{line:1671,column:13}},{start:{line:1667,column:12},end:{line:1671,column:13}}],line:1667},"59":{loc:{start:{line:1672,column:15},end:{line:1680,column:9}},type:"if",locations:[{start:{line:1672,column:15},end:{line:1680,column:9}},{start:{line:1672,column:15},end:{line:1680,column:9}}],line:1672},"60":{loc:{start:{line:1672,column:19},end:{line:1672,column:53}},type:"binary-expr",locations:[{start:{line:1672,column:19},end:{line:1672,column:35}},{start:{line:1672,column:39},end:{line:1672,column:53}}],line:1672},"61":{loc:{start:{line:1692,column:12},end:{line:1693,column:20}},type:"if",locations:[{start:{line:1692,column:12},end:{line:1693,column:20}},{start:{line:1692,column:12},end:{line:1693,column:20}}],line:1692},"62":{loc:{start:{line:1706,column:12},end:{line:1709,column:25}},type:"if",locations:[{start:{line:1706,column:12},end:{line:1709,column:25}},{start:{line:1706,column:12},end:{line:1709,column:25}}],line:1706},"63":{loc:{start:{line:1710,column:12},end:{line:1711,column:25}},type:"if",locations:[{start:{line:1710,column:12},end:{line:1711,column:25}},{start:{line:1710,column:12},end:{line:1711,column:25}}],line:1710},"64":{loc:{start:{line:1725,column:8},end:{line:1737,column:9}},type:"if",locations:[{start:{line:1725,column:8},end:{line:1737,column:9}},{start:{line:1725,column:8},end:{line:1737,column:9}}],line:1725},"65":{loc:{start:{line:1727,column:15},end:{line:1737,column:9}},type:"if",locations:[{start:{line:1727,column:15},end:{line:1737,column:9}},{start:{line:1727,column:15},end:{line:1737,column:9}}],line:1727},"66":{loc:{start:{line:1729,column:15},end:{line:1737,column:9}},type:"if",locations:[{start:{line:1729,column:15},end:{line:1737,column:9}},{start:{line:1729,column:15},end:{line:1737,column:9}}],line:1729},"67":{loc:{start:{line:1731,column:15},end:{line:1737,column:9}},type:"if",locations:[{start:{line:1731,column:15},end:{line:1737,column:9}},{start:{line:1731,column:15},end:{line:1737,column:9}}],line:1731},"68":{loc:{start:{line:1732,column:12},end:{line:1733,column:29}},type:"if",locations:[{start:{line:1732,column:12},end:{line:1733,column:29}},{start:{line:1732,column:12},end:{line:1733,column:29}}],line:1732},"69":{loc:{start:{line:1749,column:8},end:{line:1782,column:9}},type:"if",locations:[{start:{line:1749,column:8},end:{line:1782,column:9}},{start:{line:1749,column:8},end:{line:1782,column:9}}],line:1749},"70":{loc:{start:{line:1752,column:15},end:{line:1782,column:9}},type:"if",locations:[{start:{line:1752,column:15},end:{line:1782,column:9}},{start:{line:1752,column:15},end:{line:1782,column:9}}],line:1752},"71":{loc:{start:{line:1753,column:12},end:{line:1758,column:32}},type:"if",locations:[{start:{line:1753,column:12},end:{line:1758,column:32}},{start:{line:1753,column:12},end:{line:1758,column:32}}],line:1753},"72":{loc:{start:{line:1755,column:17},end:{line:1758,column:32}},type:"if",locations:[{start:{line:1755,column:17},end:{line:1758,column:32}},{start:{line:1755,column:17},end:{line:1758,column:32}}],line:1755},"73":{loc:{start:{line:1759,column:19},end:{line:1759,column:54}},type:"cond-expr",locations:[{start:{line:1759,column:42},end:{line:1759,column:43}},{start:{line:1759,column:46},end:{line:1759,column:54}}],line:1759},"74":{loc:{start:{line:1760,column:15},end:{line:1782,column:9}},type:"if",locations:[{start:{line:1760,column:15},end:{line:1782,column:9}},{start:{line:1760,column:15},end:{line:1782,column:9}}],line:1760},"75":{loc:{start:{line:1762,column:19},end:{line:1762,column:54}},type:"cond-expr",locations:[{start:{line:1762,column:42},end:{line:1762,column:43}},{start:{line:1762,column:46},end:{line:1762,column:54}}],line:1762},"76":{loc:{start:{line:1763,column:15},end:{line:1782,column:9}},type:"if",locations:[{start:{line:1763,column:15},end:{line:1782,column:9}},{start:{line:1763,column:15},end:{line:1782,column:9}}],line:1763},"77":{loc:{start:{line:1764,column:12},end:{line:1765,column:32}},type:"if",locations:[{start:{line:1764,column:12},end:{line:1765,column:32}},{start:{line:1764,column:12},end:{line:1765,column:32}}],line:1764},"78":{loc:{start:{line:1766,column:12},end:{line:1767,column:32}},type:"if",locations:[{start:{line:1766,column:12},end:{line:1767,column:32}},{start:{line:1766,column:12},end:{line:1767,column:32}}],line:1766},"79":{loc:{start:{line:1769,column:15},end:{line:1782,column:9}},type:"if",locations:[{start:{line:1769,column:15},end:{line:1782,column:9}},{start:{line:1769,column:15},end:{line:1782,column:9}}],line:1769},"80":{loc:{start:{line:1771,column:12},end:{line:1772,column:36}},type:"if",locations:[{start:{line:1771,column:12},end:{line:1772,column:36}},{start:{line:1771,column:12},end:{line:1772,column:36}}],line:1771},"81":{loc:{start:{line:1773,column:12},end:{line:1774,column:32}},type:"if",locations:[{start:{line:1773,column:12},end:{line:1774,column:32}},{start:{line:1773,column:12},end:{line:1774,column:32}}],line:1773},"82":{loc:{start:{line:1776,column:15},end:{line:1782,column:9}},type:"if",locations:[{start:{line:1776,column:15},end:{line:1782,column:9}},{start:{line:1776,column:15},end:{line:1782,column:9}}],line:1776},"83":{loc:{start:{line:1777,column:12},end:{line:1778,column:32}},type:"if",locations:[{start:{line:1777,column:12},end:{line:1778,column:32}},{start:{line:1777,column:12},end:{line:1778,column:32}}],line:1777},"84":{loc:{start:{line:1794,column:8},end:{line:1799,column:9}},type:"if",locations:[{start:{line:1794,column:8},end:{line:1799,column:9}},{start:{line:1794,column:8},end:{line:1799,column:9}}],line:1794},"85":{loc:{start:{line:1795,column:12},end:{line:1798,column:32}},type:"if",locations:[{start:{line:1795,column:12},end:{line:1798,column:32}},{start:{line:1795,column:12},end:{line:1798,column:32}}],line:1795},"86":{loc:{start:{line:1814,column:8},end:{line:1853,column:9}},type:"if",locations:[{start:{line:1814,column:8},end:{line:1853,column:9}},{start:{line:1814,column:8},end:{line:1853,column:9}}],line:1814},"87":{loc:{start:{line:1816,column:12},end:{line:1817,column:28}},type:"if",locations:[{start:{line:1816,column:12},end:{line:1817,column:28}},{start:{line:1816,column:12},end:{line:1817,column:28}}],line:1816},"88":{loc:{start:{line:1816,column:16},end:{line:1816,column:98}},type:"binary-expr",locations:[{start:{line:1816,column:16},end:{line:1816,column:55}},{start:{line:1816,column:59},end:{line:1816,column:98}}],line:1816},"89":{loc:{start:{line:1819,column:15},end:{line:1853,column:9}},type:"if",locations:[{start:{line:1819,column:15},end:{line:1853,column:9}},{start:{line:1819,column:15},end:{line:1853,column:9}}],line:1819},"90":{loc:{start:{line:1820,column:12},end:{line:1825,column:29}},type:"if",locations:[{start:{line:1820,column:12},end:{line:1825,column:29}},{start:{line:1820,column:12},end:{line:1825,column:29}}],line:1820},"91":{loc:{start:{line:1822,column:17},end:{line:1825,column:29}},type:"if",locations:[{start:{line:1822,column:17},end:{line:1825,column:29}},{start:{line:1822,column:17},end:{line:1825,column:29}}],line:1822},"92":{loc:{start:{line:1827,column:15},end:{line:1853,column:9}},type:"if",locations:[{start:{line:1827,column:15},end:{line:1853,column:9}},{start:{line:1827,column:15},end:{line:1853,column:9}}],line:1827},"93":{loc:{start:{line:1830,column:15},end:{line:1853,column:9}},type:"if",locations:[{start:{line:1830,column:15},end:{line:1853,column:9}},{start:{line:1830,column:15},end:{line:1853,column:9}}],line:1830},"94":{loc:{start:{line:1831,column:12},end:{line:1832,column:29}},type:"if",locations:[{start:{line:1831,column:12},end:{line:1832,column:29}},{start:{line:1831,column:12},end:{line:1832,column:29}}],line:1831},"95":{loc:{start:{line:1833,column:12},end:{line:1834,column:29}},type:"if",locations:[{start:{line:1833,column:12},end:{line:1834,column:29}},{start:{line:1833,column:12},end:{line:1834,column:29}}],line:1833},"96":{loc:{start:{line:1835,column:12},end:{line:1836,column:28}},type:"if",locations:[{start:{line:1835,column:12},end:{line:1836,column:28}},{start:{line:1835,column:12},end:{line:1836,column:28}}],line:1835},"97":{loc:{start:{line:1835,column:16},end:{line:1835,column:110}},type:"binary-expr",locations:[{start:{line:1835,column:16},end:{line:1835,column:61}},{start:{line:1835,column:65},end:{line:1835,column:110}}],line:1835},"98":{loc:{start:{line:1838,column:15},end:{line:1853,column:9}},type:"if",locations:[{start:{line:1838,column:15},end:{line:1853,column:9}},{start:{line:1838,column:15},end:{line:1853,column:9}}],line:1838},"99":{loc:{start:{line:1840,column:12},end:{line:1841,column:36}},type:"if",locations:[{start:{line:1840,column:12},end:{line:1841,column:36}},{start:{line:1840,column:12},end:{line:1841,column:36}}],line:1840},"100":{loc:{start:{line:1842,column:12},end:{line:1843,column:29}},type:"if",locations:[{start:{line:1842,column:12},end:{line:1843,column:29}},{start:{line:1842,column:12},end:{line:1843,column:29}}],line:1842},"101":{loc:{start:{line:1844,column:12},end:{line:1845,column:28}},type:"if",locations:[{start:{line:1844,column:12},end:{line:1845,column:28}},{start:{line:1844,column:12},end:{line:1845,column:28}}],line:1844},"102":{loc:{start:{line:1844,column:16},end:{line:1844,column:98}},type:"binary-expr",locations:[{start:{line:1844,column:16},end:{line:1844,column:55}},{start:{line:1844,column:59},end:{line:1844,column:98}}],line:1844},"103":{loc:{start:{line:1847,column:15},end:{line:1853,column:9}},type:"if",locations:[{start:{line:1847,column:15},end:{line:1853,column:9}},{start:{line:1847,column:15},end:{line:1853,column:9}}],line:1847},"104":{loc:{start:{line:1848,column:12},end:{line:1849,column:29}},type:"if",locations:[{start:{line:1848,column:12},end:{line:1849,column:29}},{start:{line:1848,column:12},end:{line:1849,column:29}}],line:1848}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":0,"153":0,"154":0,"155":0,"156":0,"157":0,"158":0,"159":0,"160":0,"161":0,"162":0,"163":0,"164":0,"165":0,"166":0,"167":0,"168":0,"169":0,"170":0,"171":0,"172":0,"173":0,"174":0,"175":0,"176":0,"177":0,"178":0,"179":0,"180":0,"181":0,"182":0,"183":0,"184":0,"185":0,"186":0,"187":0,"188":0,"189":0,"190":0,"191":0,"192":0,"193":0,"194":0,"195":0,"196":0,"197":0,"198":0,"199":0,"200":0,"201":0,"202":0,"203":0,"204":0,"205":0,"206":0,"207":0,"208":0,"209":0,"210":0,"211":0,"212":0,"213":0,"214":0,"215":0,"216":0,"217":0,"218":0,"219":0,"220":0,"221":0,"222":0,"223":0,"224":0,"225":0,"226":0,"227":0,"228":0,"229":0,"230":0,"231":0,"232":0,"233":0,"234":0,"235":0,"236":0,"237":0,"238":0,"239":0,"240":0,"241":0,"242":0,"243":0,"244":0,"245":0,"246":0,"247":0,"248":0,"249":0,"250":0,"251":0,"252":0,"253":0,"254":0,"255":0,"256":0,"257":0,"258":0,"259":0,"260":0,"261":0,"262":0,"263":0,"264":0,"265":0,"266":0,"267":0,"268":0,"269":0,"270":0,"271":0,"272":0,"273":0,"274":0,"275":0,"276":0,"277":0,"278":0,"279":0,"280":0,"281":0,"282":0,"283":0,"284":0,"285":0,"286":0,"287":0,"288":0,"289":0,"290":0,"291":0,"292":0,"293":0,"294":0,"295":0,"296":0,"297":0,"298":0,"299":0,"300":0,"301":0,"302":0,"303":0,"304":0,"305":0,"306":0,"307":0,"308":0,"309":0,"310":0,"311":0,"312":0,"313":0,"314":0,"315":0,"316":0,"317":0,"318":0,"319":0,"320":0,"321":0,"322":0,"323":0,"324":0,"325":0,"326":0,"327":0,"328":0,"329":0,"330":0,"331":0,"332":0,"333":0,"334":0,"335":0,"336":0,"337":0,"338":0,"339":0,"340":0,"341":0,"342":0,"343":0,"344":0,"345":0,"346":0,"347":0,"348":0,"349":0,"350":0,"351":0,"352":0,"353":0,"354":0,"355":0,"356":0,"357":0,"358":0,"359":0,"360":0,"361":0,"362":0,"363":0,"364":0,"365":0,"366":0,"367":0,"368":0,"369":0,"370":0,"371":0,"372":0,"373":0,"374":0,"375":0,"376":0,"377":0,"378":0,"379":0,"380":0,"381":0,"382":0,"383":0,"384":0,"385":0,"386":0,"387":0,"388":0,"389":0,"390":0,"391":0,"392":0,"393":0,"394":0,"395":0,"396":0,"397":0,"398":0,"399":0,"400":0,"401":0,"402":0,"403":0,"404":0,"405":0,"406":0,"407":0,"408":0,"409":0,"410":0,"411":0,"412":0,"413":0,"414":0,"415":0,"416":0,"417":0,"418":0,"419":0,"420":0,"421":0,"422":0,"423":0,"424":0,"425":0,"426":0,"427":0,"428":0,"429":0,"430":0,"431":0,"432":0,"433":0,"434":0,"435":0,"436":0,"437":0,"438":0,"439":0,"440":0,"441":0,"442":0,"443":0,"444":0,"445":0,"446":0,"447":0,"448":0,"449":0,"450":0,"451":0,"452":0,"453":0,"454":0,"455":0,"456":0,"457":0,"458":0,"459":0,"460":0,"461":0,"462":0,"463":0,"464":0,"465":0,"466":0,"467":0,"468":0,"469":0,"470":0,"471":0,"472":0,"473":0,"474":0,"475":0,"476":0,"477":0,"478":0,"479":0,"480":0,"481":0,"482":0,"483":0,"484":0,"485":0,"486":0,"487":0,"488":0,"489":0,"490":0,"491":0,"492":0,"493":0,"494":0,"495":0,"496":0,"497":0,"498":0,"499":0,"500":0,"501":0,"502":0,"503":0,"504":0,"505":0,"506":0,"507":0,"508":0,"509":0,"510":0,"511":0,"512":0,"513":0,"514":0,"515":0,"516":0,"517":0,"518":0,"519":0,"520":0,"521":0,"522":0,"523":0,"524":0,"525":0,"526":0,"527":0,"528":0,"529":0,"530":0,"531":0,"532":0,"533":0,"534":0,"535":0,"536":0,"537":0,"538":0,"539":0,"540":0,"541":0,"542":0,"543":0,"544":0,"545":0,"546":0,"547":0,"548":0,"549":0,"550":0,"551":0,"552":0,"553":0,"554":0,"555":0,"556":0,"557":0,"558":0,"559":0,"560":0,"561":0,"562":0,"563":0,"564":0,"565":0,"566":0,"567":0,"568":0,"569":0,"570":0,"571":0,"572":0,"573":0,"574":0,"575":0,"576":0,"577":0,"578":0,"579":0,"580":0,"581":0,"582":0,"583":0,"584":0,"585":0,"586":0,"587":0,"588":0,"589":0,"590":0,"591":0,"592":0,"593":0,"594":0,"595":0,"596":0,"597":0,"598":0,"599":0,"600":0,"601":0,"602":0,"603":0,"604":0,"605":0,"606":0,"607":0,"608":0,"609":0,"610":0,"611":0,"612":0,"613":0,"614":0,"615":0,"616":0,"617":0,"618":0,"619":0,"620":0,"621":0,"622":0,"623":0,"624":0,"625":0,"626":0,"627":0,"628":0,"629":0,"630":0,"631":0,"632":0,"633":0,"634":0,"635":0,"636":0,"637":0,"638":0,"639":0,"640":0,"641":0,"642":0,"643":0,"644":0,"645":0,"646":0,"647":0,"648":0,"649":0,"650":0,"651":0,"652":0,"653":0,"654":0,"655":0,"656":0,"657":0,"658":0,"659":0,"660":0,"661":0,"662":0,"663":0,"664":0,"665":0,"666":0,"667":0,"668":0,"669":0,"670":0,"671":0,"672":0,"673":0,"674":0,"675":0,"676":0,"677":0,"678":0,"679":0,"680":0,"681":0,"682":0,"683":0,"684":0,"685":0,"686":0,"687":0,"688":0,"689":0,"690":0,"691":0,"692":0,"693":0,"694":0,"695":0,"696":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0],"39":[0,0],"40":[0,0],"41":[0,0],"42":[0,0],"43":[0,0],"44":[0,0],"45":[0,0],"46":[0,0],"47":[0,0],"48":[0,0],"49":[0,0],"50":[0,0],"51":[0,0],"52":[0,0],"53":[0,0,0],"54":[0,0,0],"55":[0,0,0],"56":[0,0],"57":[0,0],"58":[0,0],"59":[0,0],"60":[0,0],"61":[0,0],"62":[0,0],"63":[0,0],"64":[0,0],"65":[0,0],"66":[0,0],"67":[0,0],"68":[0,0],"69":[0,0],"70":[0,0],"71":[0,0],"72":[0,0],"73":[0,0],"74":[0,0],"75":[0,0],"76":[0,0],"77":[0,0],"78":[0,0],"79":[0,0],"80":[0,0],"81":[0,0],"82":[0,0],"83":[0,0],"84":[0,0],"85":[0,0],"86":[0,0],"87":[0,0],"88":[0,0],"89":[0,0],"90":[0,0],"91":[0,0],"92":[0,0],"93":[0,0],"94":[0,0],"95":[0,0],"96":[0,0],"97":[0,0],"98":[0,0],"99":[0,0],"100":[0,0],"101":[0,0],"102":[0,0],"103":[0,0],"104":[0,0]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();++cov_sp7mr9u21.s[0];(function(require,requirejs,define){++cov_sp7mr9u21.f[0];++cov_sp7mr9u21.s[1];define(["sylvester","underscore","numeric"],function(Sylvester,_,numeric){++cov_sp7mr9u21.f[1];var $V=(++cov_sp7mr9u21.s[2],Sylvester.Vector.create);var $M=(++cov_sp7mr9u21.s[3],Sylvester.Matrix.create);var Vector=(++cov_sp7mr9u21.s[4],Sylvester.Vector);var Matrix=(++cov_sp7mr9u21.s[5],Sylvester.Matrix);function PrairieGeom(){++cov_sp7mr9u21.f[2];}/*****************************************************************************//** The golden ratio.
     */++cov_sp7mr9u21.s[6];PrairieGeom.prototype.goldenRatio=(1+Math.sqrt(5))/2;/*****************************************************************************//** Convert degrees to radians.
        
        @param {number} degrees The angle in degrees.
        @return {number} The angle in radians.
    */++cov_sp7mr9u21.s[7];PrairieGeom.prototype.degToRad=function(degrees){++cov_sp7mr9u21.f[3];++cov_sp7mr9u21.s[8];return degrees*Math.PI/180;};/** Convert radians to degrees.

        @param {number} radians The angle in radians.
        @return {number} The angle in degrees.
    */++cov_sp7mr9u21.s[9];PrairieGeom.prototype.radToDeg=function(radians){++cov_sp7mr9u21.f[4];++cov_sp7mr9u21.s[10];return radians*180/Math.PI;};/** Convert a string to a boolean.

        @param {String} s The input string.
        @return {Boolean} The boolean value of s ("true" -> true).
    */++cov_sp7mr9u21.s[11];PrairieGeom.prototype.toBool=function(s){++cov_sp7mr9u21.f[5];++cov_sp7mr9u21.s[12];if(s===true){++cov_sp7mr9u21.b[0][0];++cov_sp7mr9u21.s[13];return true;}else{++cov_sp7mr9u21.b[0][1];}++cov_sp7mr9u21.s[14];if(s==="true"){++cov_sp7mr9u21.b[1][0];++cov_sp7mr9u21.s[15];return true;}else{++cov_sp7mr9u21.b[1][1];}++cov_sp7mr9u21.s[16];return false;};// Histogram (bin count) data
// From jStat, modified to include low/high args
++cov_sp7mr9u21.s[17];PrairieGeom.prototype.histogram=function(arr,bins,low,high){++cov_sp7mr9u21.f[6];var first=(++cov_sp7mr9u21.s[18],low!==undefined?(++cov_sp7mr9u21.b[2][0],low):(++cov_sp7mr9u21.b[2][1],jStat.min(arr)));var last=(++cov_sp7mr9u21.s[19],high!==undefined?(++cov_sp7mr9u21.b[3][0],high):(++cov_sp7mr9u21.b[3][1],jStat.max(arr)));var binCnt=(++cov_sp7mr9u21.s[20],(++cov_sp7mr9u21.b[4][0],bins)||(++cov_sp7mr9u21.b[4][1],4));var binWidth=(++cov_sp7mr9u21.s[21],(last-first)/binCnt);var len=(++cov_sp7mr9u21.s[22],arr.length);var bins=(++cov_sp7mr9u21.s[23],[]);var i;++cov_sp7mr9u21.s[24];for(i=0;i<binCnt;i++){++cov_sp7mr9u21.s[25];bins[i]=0;}++cov_sp7mr9u21.s[26];for(i=0;i<len;i++){++cov_sp7mr9u21.s[27];bins[Math.min(Math.floor((arr[i]-first)/binWidth),binCnt-1)]+=1;}++cov_sp7mr9u21.s[28];return bins;};/** Fixed modulus function (handles negatives correctly).

        @param {number} value The number to convert.
        @param {number} modulus The modulus.
        @return {number} value mod modulus.
    */++cov_sp7mr9u21.s[29];PrairieGeom.prototype.fixedMod=function(value,modulus){++cov_sp7mr9u21.f[7];++cov_sp7mr9u21.s[30];return(value%modulus+modulus)%modulus;};/** Fixed divmod function.

        @param {number} value The number to convert.
        @param {number} modulus The modulus.
        @return {Array} [a, b] = [value div modulus, value mod modulus], so value = a * modulus + b.
    */++cov_sp7mr9u21.s[31];PrairieGeom.prototype.fixedDivMod=function(value,modulus){++cov_sp7mr9u21.f[8];var b=(++cov_sp7mr9u21.s[32],this.fixedMod(value,modulus));var a=(++cov_sp7mr9u21.s[33],(value-b)/modulus);++cov_sp7mr9u21.s[34];return[a,b];};/** Interval modulus function.

        @param {number} x The number to convert.
        @param {number} a Lower interval end.
        @param {number} b Upper interval end.
        @return {number} The value modded to within [a,b].
    */++cov_sp7mr9u21.s[35];PrairieGeom.prototype.intervalMod=function(x,a,b){++cov_sp7mr9u21.f[9];++cov_sp7mr9u21.s[36];return this.fixedMod(x-a,b-a)+a;};/** Interval divide function.

        @param {number} x The number to convert.
        @param {number} a Lower interval end.
        @param {number} b Upper interval end.
        @return {number} The value divided into the interval within [a,b].
    */++cov_sp7mr9u21.s[37];PrairieGeom.prototype.intervalDiv=function(x,a,b){++cov_sp7mr9u21.f[10];++cov_sp7mr9u21.s[38];return Math.floor((x-a)/(b-a));};/** Vector interval modulus function.

        @param {Vector} x The vector to convert.
        @param {Vector} a Lower interval ends.
        @param {Vector} b Upper interval ends.
        @return {Vector} The vector modded to within [a,b].
    */++cov_sp7mr9u21.s[39];PrairieGeom.prototype.vectorIntervalMod=function(x,a,b){++cov_sp7mr9u21.f[11];var r=(++cov_sp7mr9u21.s[40],[]);++cov_sp7mr9u21.s[41];for(var i=1;i<=x.elements.length;i++){++cov_sp7mr9u21.s[42];r.push(this.intervalMod(x.e(i),a.e(i),b.e(i)));}++cov_sp7mr9u21.s[43];return $V(r);};/** Angle difference function.

        @param {Number} a1 The first angle.
        @param {Number} a2 The second angle.
        @return {Number} The difference between a1 and a2 in [0, 2 pi).
    */++cov_sp7mr9u21.s[44];PrairieGeom.prototype.angleDifference=function(a1,a2){++cov_sp7mr9u21.f[12];++cov_sp7mr9u21.s[45];return Math.min(this.fixedMod(a1-a2,2*Math.PI),this.fixedMod(a2-a1,2*Math.PI));};/** Angle difference function in degrees.

        @param {Number} a1 The first angle (degrees).
        @param {Number} a2 The second angle (degrees).
        @return {Number} The difference between a1 and a2 (degrees, in [0, 360)).
    */++cov_sp7mr9u21.s[46];PrairieGeom.prototype.angleDifferenceDeg=function(a1,a2){++cov_sp7mr9u21.f[13];++cov_sp7mr9u21.s[47];return Math.min(this.fixedMod(a1-a2,360),this.fixedMod(a2-a1,360));};/** Find the gcd (greatest common divisor) of two integers with Euclid's algorithm.

        @param {Number} a First integer.
        @param {Number} b Second integer.
        @return {Number} The gcd of a and b.
    */++cov_sp7mr9u21.s[48];PrairieGeom.prototype.gcd=function(a,b){++cov_sp7mr9u21.f[14];++cov_sp7mr9u21.s[49];if(b===0){++cov_sp7mr9u21.b[5][0];++cov_sp7mr9u21.s[50];return a;}else{++cov_sp7mr9u21.b[5][1];}var aModB=(++cov_sp7mr9u21.s[51],(a%b+b)%b);++cov_sp7mr9u21.s[52];return this.gcd(b,aModB);};/** Round a vector to the nearest integer components.

        @param {Vector} v The vector to round.
        @return {Vector} a Vector with components [Math.round(v.e(1)), Math.round(v.e(2)), ...].
    */++cov_sp7mr9u21.s[53];PrairieGeom.prototype.vectorRound=function(v){++cov_sp7mr9u21.f[15];var r=(++cov_sp7mr9u21.s[54],[]);++cov_sp7mr9u21.s[55];for(var i=0;i<v.elements.length;i++){++cov_sp7mr9u21.s[56];r.push(Math.round(v.e(i+1)));}++cov_sp7mr9u21.s[57];return $V(r);};/** Clip a value x to the given interval [a, b].

        @param {number} x Value to clip.
        @param {number} a Lower interval end.
        @param {number} b Upper interval end.
    */++cov_sp7mr9u21.s[58];PrairieGeom.prototype.clip=function(x,a,b){++cov_sp7mr9u21.f[16];++cov_sp7mr9u21.s[59];return Math.max(a,Math.min(b,x));};/** Intersection of two intervals.

        @param {Array} int1 First interval (two entries giving start and end).
        @param {Array} int2 Second interval (two entries giving start and end).
        @return {Array} Intersected interval (two entries giving start and end), or an empty array.
    */++cov_sp7mr9u21.s[60];PrairieGeom.prototype.intersectIntervals=function(int1,int2){++cov_sp7mr9u21.f[17];var result=(++cov_sp7mr9u21.s[61],[Math.max(int1[0],int2[0]),Math.min(int1[1],int2[1])]);++cov_sp7mr9u21.s[62];if(result[1]<result[0]){++cov_sp7mr9u21.b[6][0];++cov_sp7mr9u21.s[63];result=[];}else{++cov_sp7mr9u21.b[6][1];}++cov_sp7mr9u21.s[64];return result;};/** Intersection of two angle ranges modulo 2 pi.

        @param {Array} r1 First range (two entries giving start and end), or an empty array.
        @param {Array} r2 Second range (two entries giving start and end), or an empty array.
        @return {Array} Intersected range (two entries giving start and end), or an empty array.
    */++cov_sp7mr9u21.s[65];PrairieGeom.prototype.intersectAngleRanges=function(r1,r2){++cov_sp7mr9u21.f[18];++cov_sp7mr9u21.s[66];if((++cov_sp7mr9u21.b[8][0],r1.length===0)||(++cov_sp7mr9u21.b[8][1],r2.length===0)){++cov_sp7mr9u21.b[7][0];++cov_sp7mr9u21.s[67];return[];}else{++cov_sp7mr9u21.b[7][1];}++cov_sp7mr9u21.s[68];if(r1[0]>r1[1]){++cov_sp7mr9u21.b[9][0];++cov_sp7mr9u21.s[69];r1=[r1[1],r1[0]];}else{++cov_sp7mr9u21.b[9][1];}++cov_sp7mr9u21.s[70];if(r2[0]>r2[1]){++cov_sp7mr9u21.b[10][0];++cov_sp7mr9u21.s[71];r2=[r2[1],r2[0]];}else{++cov_sp7mr9u21.b[10][1];}var TWOPI=(++cov_sp7mr9u21.s[72],2*Math.PI);var start1=(++cov_sp7mr9u21.s[73],this.fixedMod(r1[0],TWOPI));var end1=(++cov_sp7mr9u21.s[74],this.fixedMod(r1[1],TWOPI));var start2=(++cov_sp7mr9u21.s[75],this.fixedMod(r2[0],TWOPI));var end2=(++cov_sp7mr9u21.s[76],this.fixedMod(r2[1],TWOPI));var r1List;++cov_sp7mr9u21.s[77];if(end1>start1){++cov_sp7mr9u21.b[11][0];++cov_sp7mr9u21.s[78];r1List=[[start1,end1]];}else{++cov_sp7mr9u21.b[11][1];++cov_sp7mr9u21.s[79];r1List=[[start1-TWOPI,end1],[start1,end1+TWOPI]];}var r2Use;++cov_sp7mr9u21.s[80];if(end2>start2){++cov_sp7mr9u21.b[12][0];++cov_sp7mr9u21.s[81];r2Use=[start2,end2];}else{++cov_sp7mr9u21.b[12][1];++cov_sp7mr9u21.s[82];r2Use=[start2,end2+TWOPI];}var i,r1Use,r12;var result=(++cov_sp7mr9u21.s[83],[]);++cov_sp7mr9u21.s[84];for(i=0;i<r1List.length;i++){++cov_sp7mr9u21.s[85];r1Use=r1List[i];++cov_sp7mr9u21.s[86];r12=this.intersectIntervals(r1Use,r2Use);++cov_sp7mr9u21.s[87];if(r12.length>0){++cov_sp7mr9u21.b[13][0];++cov_sp7mr9u21.s[88];result.push(r12);}else{++cov_sp7mr9u21.b[13][1];}}++cov_sp7mr9u21.s[89];return result;};/** Convert polar to rectangular coordinates.

        @param {Vector} pP Polar coordinates (r, theta).
        @return {Vector} The position in rectangular coordinates (x, y).
    */++cov_sp7mr9u21.s[90];PrairieGeom.prototype.polarToRect=function(pP){++cov_sp7mr9u21.f[19];var pR=(++cov_sp7mr9u21.s[91],$V([pP.e(1)*Math.cos(pP.e(2)),pP.e(1)*Math.sin(pP.e(2))]));++cov_sp7mr9u21.s[92];return pR;};/** Convert rectangular to polar coordintes.

        @param {Vector} pR Rectangular coordinates (x, y).
        @return {Vector} Polar coordinates (r, theta).
    */++cov_sp7mr9u21.s[93];PrairieGeom.prototype.rectToPolar=function(pR){++cov_sp7mr9u21.f[20];var x=(++cov_sp7mr9u21.s[94],pR.e(1));var y=(++cov_sp7mr9u21.s[95],pR.e(2));var r=(++cov_sp7mr9u21.s[96],Math.sqrt(x*x+y*y));var theta=(++cov_sp7mr9u21.s[97],Math.atan2(y,x));var pP=(++cov_sp7mr9u21.s[98],$V([r,theta]));++cov_sp7mr9u21.s[99];return pP;};/** Find the polar basis vectors at a given point.

        @param {Vector} pP Polar coordinates (r, theta) of the point.
        @return {Array} The basis vectors [eR, eTheta] at pP.
    */++cov_sp7mr9u21.s[100];PrairieGeom.prototype.polarBasis=function(pP){++cov_sp7mr9u21.f[21];var theta=(++cov_sp7mr9u21.s[101],pP.e(2));var eR=(++cov_sp7mr9u21.s[102],$V([Math.cos(theta),Math.sin(theta)]));var eTheta=(++cov_sp7mr9u21.s[103],$V([-Math.sin(theta),Math.cos(theta)]));++cov_sp7mr9u21.s[104];return[eR,eTheta];};/** Convert a vector in a polar basis to a rectangular basis.

        @param {Vector} vP Vector in polar basis (eR, eTheta).
        @param {Vector} pP Position to convert at (r, theta).
        @return {Vector} The vector vR in rectangular coordinates.
    */++cov_sp7mr9u21.s[105];PrairieGeom.prototype.vecPolarToRect=function(vP,pP){++cov_sp7mr9u21.f[22];var basis=(++cov_sp7mr9u21.s[106],this.polarBasis(pP));var eR=(++cov_sp7mr9u21.s[107],basis[0]);var eTheta=(++cov_sp7mr9u21.s[108],basis[1]);var vR=(++cov_sp7mr9u21.s[109],eR.x(vP.e(1)).add(eTheta.x(vP.e(2))));++cov_sp7mr9u21.s[110];return vR;};/** Convert spherical to rectangular coordintes.

        @param {Vector} pS Spherical coordinates (r, theta, phi).
        @return {Vector} The position in rectangular coordinates (x, y, z).
    */++cov_sp7mr9u21.s[111];PrairieGeom.prototype.sphericalToRect=function(pS){++cov_sp7mr9u21.f[23];var pR=(++cov_sp7mr9u21.s[112],$V([pS.e(1)*Math.cos(pS.e(2))*Math.cos(pS.e(3)),pS.e(1)*Math.sin(pS.e(2))*Math.cos(pS.e(3)),pS.e(1)*Math.sin(pS.e(3))]));++cov_sp7mr9u21.s[113];return pR;};/** Convert rectangular to spherical coordintes.

        @param {Vector} pR Rectangular coordinates (x, y, z).
        @return {Vector} Spherical coordinates (r, theta, phi).
    */++cov_sp7mr9u21.s[114];PrairieGeom.prototype.rectToSpherical=function(pR){++cov_sp7mr9u21.f[24];var x=(++cov_sp7mr9u21.s[115],pR.e(1));var y=(++cov_sp7mr9u21.s[116],pR.e(2));var z=(++cov_sp7mr9u21.s[117],pR.e(3));var r=(++cov_sp7mr9u21.s[118],Math.sqrt(x*x+y*y+z*z));var theta=(++cov_sp7mr9u21.s[119],Math.atan2(y,x));var phi=(++cov_sp7mr9u21.s[120],Math.asin(z/r));var pS=(++cov_sp7mr9u21.s[121],$V([r,theta,phi]));++cov_sp7mr9u21.s[122];return pS;};/** Find the spherical basis vectors at a given point.

        @param {Vector} pS Spherical coordinates (r, theta, phi) of the point.
        @return {Array} The basis vectors [eR, eTheta, ePhi] at pS.
    */++cov_sp7mr9u21.s[123];PrairieGeom.prototype.sphericalBasis=function(pS){++cov_sp7mr9u21.f[25];var theta=(++cov_sp7mr9u21.s[124],pS.e(2));var phi=(++cov_sp7mr9u21.s[125],pS.e(3));var eR=(++cov_sp7mr9u21.s[126],this.sphericalToRect($V([1,theta,phi])));var eTheta=(++cov_sp7mr9u21.s[127],$V([-Math.sin(theta),Math.cos(theta),0]));var ePhi=(++cov_sp7mr9u21.s[128],$V([-Math.cos(theta)*Math.sin(phi),-Math.sin(theta)*Math.sin(phi),Math.cos(phi)]));++cov_sp7mr9u21.s[129];return[eR,eTheta,ePhi];};/** Convert cylindrical to rectangular coordintes.

        @param {Vector} pC Cylindrical coordinates (r, theta, z).
        @return {Vector} The position in rectangular coordinates (x, y, z).
    */++cov_sp7mr9u21.s[130];PrairieGeom.prototype.cylindricalToRect=function(pC){++cov_sp7mr9u21.f[26];var pR=(++cov_sp7mr9u21.s[131],$V([pC.e(1)*Math.cos(pC.e(2)),pC.e(1)*Math.sin(pC.e(2)),pC.e(3)]));++cov_sp7mr9u21.s[132];return pR;};/** Convert rectangular to cylindrical coordintes.

        @param {Vector} pR Rectangular coordinates (x, y, z).
        @return {Vector} Cylindrical coordinates (r, theta, z).
    */++cov_sp7mr9u21.s[133];PrairieGeom.prototype.rectToCylindrical=function(pR){++cov_sp7mr9u21.f[27];var x=(++cov_sp7mr9u21.s[134],pR.e(1));var y=(++cov_sp7mr9u21.s[135],pR.e(2));var z=(++cov_sp7mr9u21.s[136],pR.e(3));var r=(++cov_sp7mr9u21.s[137],Math.sqrt(x*x+y*y));var theta=(++cov_sp7mr9u21.s[138],Math.atan2(y,x));var pC=(++cov_sp7mr9u21.s[139],$V([r,theta,z]));++cov_sp7mr9u21.s[140];return pC;};/** Find the cylindrical basis vectors at a given point.

        @param {Vector} pC Cylindrical coordinates (r, theta, z) of the point.
        @return {Array} The basis vectors [eR, eTheta, eZ] at pC.
    */++cov_sp7mr9u21.s[141];PrairieGeom.prototype.cylindricalBasis=function(pC){++cov_sp7mr9u21.f[28];var theta=(++cov_sp7mr9u21.s[142],pC.e(2));var eR=(++cov_sp7mr9u21.s[143],$V([Math.cos(theta),Math.sin(theta),0]));var eTheta=(++cov_sp7mr9u21.s[144],$V([-Math.sin(theta),Math.cos(theta),0]));var eZ=(++cov_sp7mr9u21.s[145],$V([0,0,1]));++cov_sp7mr9u21.s[146];return[eR,eTheta,eZ];};/** Perpendicular vector in 2D.

        @param {Vector} v A 2D vector.
        @return {Vector} The counter-clockwise perpendicular vector to v.
    */++cov_sp7mr9u21.s[147];PrairieGeom.prototype.perp=function(v){++cov_sp7mr9u21.f[29];++cov_sp7mr9u21.s[148];return $V([-v.e(2),v.e(1)]);};/** Orthogonal projection.

        @param {Vector} u Vector to project.
        @param {Vector} v Vector to project onto.
        @return {Vector} The orthogonal projection of u onto v.
    */++cov_sp7mr9u21.s[149];PrairieGeom.prototype.orthProj=function(u,v){++cov_sp7mr9u21.f[30];++cov_sp7mr9u21.s[150];if(v.modulus()<1e-30){++cov_sp7mr9u21.b[14][0];++cov_sp7mr9u21.s[151];return Vector.Zero(u.elements.length);}else{++cov_sp7mr9u21.b[14][1];++cov_sp7mr9u21.s[152];return v.x(u.dot(v)/Math.pow(v.modulus(),2));}};/** Orthogonal complement.

        @param {Vector} u Vector to project.
        @param {Vector} v Vector to complement against.
        @return {Vector} The orthogonal complement of u with respect to v.
    */++cov_sp7mr9u21.s[153];PrairieGeom.prototype.orthComp=function(u,v){++cov_sp7mr9u21.f[31];++cov_sp7mr9u21.s[154];return u.subtract(this.orthProj(u,v));};/** Choose a 3D unit vector orthogonal to the given vector.

        @param {Vector} v The base vector.
        @return {Vector} A unit vector n that is orthogonal to v.
    */++cov_sp7mr9u21.s[155];PrairieGeom.prototype.chooseNormVec=function(v){++cov_sp7mr9u21.f[32];var e1=(++cov_sp7mr9u21.s[156],Math.abs(v.e(1)));var e2=(++cov_sp7mr9u21.s[157],Math.abs(v.e(2)));var e3=(++cov_sp7mr9u21.s[158],Math.abs(v.e(3)));var n;++cov_sp7mr9u21.s[159];if(e1<=Math.min(e2,e3)){++cov_sp7mr9u21.b[15][0];++cov_sp7mr9u21.s[160];n=Vector.i;}else{++cov_sp7mr9u21.b[15][1];}++cov_sp7mr9u21.s[161];if(e2<=Math.min(e3,e1)){++cov_sp7mr9u21.b[16][0];++cov_sp7mr9u21.s[162];n=Vector.j;}else{++cov_sp7mr9u21.b[16][1];}++cov_sp7mr9u21.s[163];if(e3<=Math.min(e1,e2)){++cov_sp7mr9u21.b[17][0];++cov_sp7mr9u21.s[164];n=Vector.k;}else{++cov_sp7mr9u21.b[17][1];}++cov_sp7mr9u21.s[165];n=this.orthComp(n,v).toUnitVector();++cov_sp7mr9u21.s[166];return n;};/** Transpose a (column) vector to a row matrix.

        @param {Vector} v The vector.
        @return {Matrix} A row-matrix that is the transpose of v.
    */++cov_sp7mr9u21.s[167];PrairieGeom.prototype.vecTranspose=function(v){++cov_sp7mr9u21.f[33];++cov_sp7mr9u21.s[168];return $M([v.elements]);};/** Condition number of a matrix.

        @param {Array} m The matrix (array of arrays).
        @return {Number} The condition number of m.
    */++cov_sp7mr9u21.s[169];PrairieGeom.prototype.cond=function(m){++cov_sp7mr9u21.f[34];var svd=(++cov_sp7mr9u21.s[170],numeric.svd(m));var cond=(++cov_sp7mr9u21.s[171],_.max(svd.S)/_.min(svd.S));++cov_sp7mr9u21.s[172];return cond;};/** Convert everything to a 2D matrix (array of array of scalars).

        @param {Object} data A scalar, Vector, Matrix, or array.
        @return {Array} An array of arrays of scalars.
    */++cov_sp7mr9u21.s[173];PrairieGeom.prototype.ensureArray2D=function(data){++cov_sp7mr9u21.f[35];++cov_sp7mr9u21.s[174];if(typeof data==="number"){++cov_sp7mr9u21.b[18][0];++cov_sp7mr9u21.s[175];return[[data]];}else{++cov_sp7mr9u21.b[18][1];++cov_sp7mr9u21.s[176];if(data instanceof Vector){++cov_sp7mr9u21.b[19][0];++cov_sp7mr9u21.s[177];return _(data.elements).map(function(e){++cov_sp7mr9u21.f[36];++cov_sp7mr9u21.s[178];return[e];});}else{++cov_sp7mr9u21.b[19][1];++cov_sp7mr9u21.s[179];if(data instanceof Matrix){++cov_sp7mr9u21.b[20][0];++cov_sp7mr9u21.s[180];return data.elements;}else{++cov_sp7mr9u21.b[20][1];++cov_sp7mr9u21.s[181];if(data instanceof Array){++cov_sp7mr9u21.b[21][0];++cov_sp7mr9u21.s[182];if(data.length===0){++cov_sp7mr9u21.b[22][0];++cov_sp7mr9u21.s[183];return[[]];}else{++cov_sp7mr9u21.b[22][1];}++cov_sp7mr9u21.s[184];if(typeof data[0]==="number"){++cov_sp7mr9u21.b[23][0];++cov_sp7mr9u21.s[185];return _(data).map(function(e){++cov_sp7mr9u21.f[37];++cov_sp7mr9u21.s[186];return[e];});}else{++cov_sp7mr9u21.b[23][1];}}else{++cov_sp7mr9u21.b[21][1];}}}}++cov_sp7mr9u21.s[187];return data;};/** Concatenate array matrices horizontally.

        @param {Array} m1 First matrix.
        @param {Array} m2 Second matrix.
        @return {Array} The matrix [m1 m2].
    */++cov_sp7mr9u21.s[188];PrairieGeom.prototype.hConcatArray2D=function(m1,m2){++cov_sp7mr9u21.f[38];++cov_sp7mr9u21.s[189];if(m1===undefined){++cov_sp7mr9u21.b[24][0];++cov_sp7mr9u21.s[190];return m2;}else{++cov_sp7mr9u21.b[24][1];}++cov_sp7mr9u21.s[191];return _.map(_.zip(m1,m2),function(r){++cov_sp7mr9u21.f[39];++cov_sp7mr9u21.s[192];return r[0].concat(r[1]);});};/** Concatenate array matrices vertically.

        @param {Array} m1 First matrix.
        @param {Array} m2 Second matrix.
        @return {Array} The matrix [m1^T m2^T]^T.
    */++cov_sp7mr9u21.s[193];PrairieGeom.prototype.vConcatArray2D=function(m1,m2){++cov_sp7mr9u21.f[40];++cov_sp7mr9u21.s[194];if(m1===undefined){++cov_sp7mr9u21.b[25][0];++cov_sp7mr9u21.s[195];return m2;}else{++cov_sp7mr9u21.b[25][1];}++cov_sp7mr9u21.s[196];return m1.concat(m2);};/** Assemble blocks (scalars, vectors, or matrices) into a matrix.

        @param {Array} blocks An array of arrays giving blocks of the matrix.
        @return {Array} The resulting matrix array.
    */++cov_sp7mr9u21.s[197];PrairieGeom.prototype.blocksToMatrix=function(blocks){++cov_sp7mr9u21.f[41];var that=(++cov_sp7mr9u21.s[198],this);++cov_sp7mr9u21.s[199];return _.chain(blocks).map(function(r){++cov_sp7mr9u21.f[42];++cov_sp7mr9u21.s[200];return _.chain(r).map(that.ensureArray2D).reduce(that.hConcatArray2D,undefined).value();}).reduce(that.vConcatArray2D,undefined).value();};/** Extract columns from a matrix.

        @param {Array} m The matrix.
        @param {Array} colList The list of column numbers (0-based).
        @return {Array} The matrix of columns.
    */++cov_sp7mr9u21.s[201];PrairieGeom.prototype.getColsArray2D=function(m,colList){++cov_sp7mr9u21.f[43];++cov_sp7mr9u21.s[202];return _(m).map(function(r){++cov_sp7mr9u21.f[44];++cov_sp7mr9u21.s[203];return _(colList).map(function(i){++cov_sp7mr9u21.f[45];++cov_sp7mr9u21.s[204];return r[i];});});};/** Extract entries from a vector.

        @param {Array} v The vector.
        @param {Array} indList The list of indexes (0-based).
        @return {Array} The vector of elements.
    */++cov_sp7mr9u21.s[205];PrairieGeom.prototype.getElemsArray=function(v,indList){++cov_sp7mr9u21.f[46];++cov_sp7mr9u21.s[206];return _(indList).map(function(i){++cov_sp7mr9u21.f[47];++cov_sp7mr9u21.s[207];return v[i];});};/** Solve a linear system with partially specified data.

        @param {Array} lhs The left-hand-side.
        @param {Array} rhs The right-hand-side.
        @param {Array} givenVars A boolean array with true entries being specified variables.
        @param {Array} vars An array with entries giving the partially complete data.
        @return {Array} The complete solution.
    */++cov_sp7mr9u21.s[208];PrairieGeom.prototype.solveRemainingVars=function(lhs,rhs,givenVars,vars){++cov_sp7mr9u21.f[48];var givenInds=(++cov_sp7mr9u21.s[209],[]),givenX=(++cov_sp7mr9u21.s[210],[]),findInds=(++cov_sp7mr9u21.s[211],[]);++cov_sp7mr9u21.s[212];_(givenVars).each(function(g,i){++cov_sp7mr9u21.f[49];++cov_sp7mr9u21.s[213];if(g){++cov_sp7mr9u21.b[26][0];++cov_sp7mr9u21.s[214];givenInds.push(i);++cov_sp7mr9u21.s[215];givenX.push(vars[i]);}else{++cov_sp7mr9u21.b[26][1];++cov_sp7mr9u21.s[216];findInds.push(i);}});var givenLHS=(++cov_sp7mr9u21.s[217],this.getColsArray2D(lhs,givenInds));var findLHS=(++cov_sp7mr9u21.s[218],this.getColsArray2D(lhs,findInds));var finalRHS=(++cov_sp7mr9u21.s[219],numeric.sub(rhs,numeric.dot(givenLHS,givenX)));++cov_sp7mr9u21.s[220];if(Math.abs(numeric.det(findLHS))<1e-8){++cov_sp7mr9u21.b[27][0];++cov_sp7mr9u21.s[221];return null;}else{++cov_sp7mr9u21.b[27][1];}var LU=(++cov_sp7mr9u21.s[222],numeric.LU(findLHS));var x=(++cov_sp7mr9u21.s[223],numeric.LUsolve(LU,finalRHS));var ans=(++cov_sp7mr9u21.s[224],_(vars).map(_.identity));++cov_sp7mr9u21.s[225];_(findInds).each(function(ind,i){++cov_sp7mr9u21.f[50];++cov_sp7mr9u21.s[226];ans[ind]=x[i];});++cov_sp7mr9u21.s[227];return ans;};/** Solve A sin(x) + B cos(x) = C for x.

        @param {Number} A First coefficent.
        @param {Number} B Second coefficent.
        @param {Number} C Right hand side.
        @return {Number} The solution x in [0, 2 * pi).
    */++cov_sp7mr9u21.s[228];PrairieGeom.prototype.solveSinCos=function(A,B,C){++cov_sp7mr9u21.f[51];var norm=(++cov_sp7mr9u21.s[229],Math.sqrt(A*A+B*B));var y=(++cov_sp7mr9u21.s[230],Math.atan2(B,A));var x=(++cov_sp7mr9u21.s[231],Math.asin(C/norm)-y);++cov_sp7mr9u21.s[232];x=this.fixedMod(x,2*Math.PI);++cov_sp7mr9u21.s[233];return x;};/** Compute a bounding box for a set of points in 2D.

        @param {Array} points Array of vectors giving point locations.
        @return {Object} A bounding box object with properties "bottomLeft", "bottomRight", "topLeft", "topRight", "center", and "extent".
    */++cov_sp7mr9u21.s[234];PrairieGeom.prototype.boundingBox2D=function(points){++cov_sp7mr9u21.f[52];var xMin=(++cov_sp7mr9u21.s[235],points[0].e(1));var xMax=(++cov_sp7mr9u21.s[236],points[0].e(1));var yMin=(++cov_sp7mr9u21.s[237],points[0].e(2));var yMax=(++cov_sp7mr9u21.s[238],points[0].e(2));++cov_sp7mr9u21.s[239];for(var i=1;i<points.length;i++){++cov_sp7mr9u21.s[240];xMin=Math.min(xMin,points[i].e(1));++cov_sp7mr9u21.s[241];xMax=Math.max(xMax,points[i].e(1));++cov_sp7mr9u21.s[242];yMin=Math.min(yMin,points[i].e(2));++cov_sp7mr9u21.s[243];yMax=Math.max(yMax,points[i].e(2));}++cov_sp7mr9u21.s[244];return{bottomLeft:$V([xMin,yMin]),bottomRight:$V([xMax,yMin]),topLeft:$V([xMin,yMax]),topRight:$V([xMax,yMax]),center:$V([(xMin+xMax)/2,(yMin+yMax)/2]),extent:$V([xMax-xMin,yMax-yMin])};};/** Test whether a point is inside a bounding box.

        @param {Vector} lower Lower corner of the bounding box (each component most negative).
        @param {Vector} upper Upper corner of the bounding box (each component most positive).
        @param {Vector} point Point to test.
        @return {Boolean} True if point is between lower and upper, otherwise false.
    */++cov_sp7mr9u21.s[245];PrairieGeom.prototype.insideBoundingBox=function(lower,upper,point){++cov_sp7mr9u21.f[53];var n=(++cov_sp7mr9u21.s[246],point.elements.length);var inside=(++cov_sp7mr9u21.s[247],true);++cov_sp7mr9u21.s[248];for(var i=1;i<n+1;i++){++cov_sp7mr9u21.s[249];if((++cov_sp7mr9u21.b[29][0],point.e(i)<lower.e(i))||(++cov_sp7mr9u21.b[29][1],point.e(i)>upper.e(i))){++cov_sp7mr9u21.b[28][0];++cov_sp7mr9u21.s[250];inside=false;}else{++cov_sp7mr9u21.b[28][1];}}++cov_sp7mr9u21.s[251];return inside;};/** Test whether all points are inside a bounding box.

        @param {Vector} lower Lower corner of the bounding box (each component most negative).
        @param {Vector} upper Upper corner of the bounding box (each component most positive).
        @param {Array} points Points to test.
        @return {Boolean} True if point is between lower and upper, otherwise false.
    */++cov_sp7mr9u21.s[252];PrairieGeom.prototype.allInsideBoundingBox=function(lower,upper,points){++cov_sp7mr9u21.f[54];var allInside=(++cov_sp7mr9u21.s[253],true);++cov_sp7mr9u21.s[254];for(var i=0;i<points.length;i++){++cov_sp7mr9u21.s[255];allInside=(++cov_sp7mr9u21.b[30][0],allInside)&&(++cov_sp7mr9u21.b[30][1],this.insideBoundingBox(lower,upper,points[i]));}++cov_sp7mr9u21.s[256];return allInside;};/** Max and min dists between points in a set.

        @param {Array} points An array of points.
        @return {Object} An object with properties "minDist" and "maxDist".
    */++cov_sp7mr9u21.s[257];PrairieGeom.prototype.pointSetDists=function(points){++cov_sp7mr9u21.f[55];++cov_sp7mr9u21.s[258];if(points.length<2){++cov_sp7mr9u21.b[31][0];++cov_sp7mr9u21.s[259];return{minDist:0,maxDist:0};}else{++cov_sp7mr9u21.b[31][1];}var d,maxDist,minDist;++cov_sp7mr9u21.s[260];for(var i=0;i<points.length;points++){++cov_sp7mr9u21.s[261];for(var j=i+1;j<points.length;j++){++cov_sp7mr9u21.s[262];d=points[i].subtract(points[j]).modulus();++cov_sp7mr9u21.s[263];if((++cov_sp7mr9u21.b[33][0],i===0)&&(++cov_sp7mr9u21.b[33][1],j===1)){++cov_sp7mr9u21.b[32][0];++cov_sp7mr9u21.s[264];maxDist=d;++cov_sp7mr9u21.s[265];minDist=d;}else{++cov_sp7mr9u21.b[32][1];++cov_sp7mr9u21.s[266];maxDist=Math.max(maxDist,d);++cov_sp7mr9u21.s[267];minDist=Math.min(minDist,d);}}}++cov_sp7mr9u21.s[268];return{minDist:minDist,maxDist:maxDist};};/** On which side of a line segment does another line segment lie in 2D?

        @param {Vector} a0 Start of first line segment (2D).
        @param {Vector} a1 End of first line segment (2D).
        @param {Vector} b0 Start of second line segment (2D).
        @param {Vector} b1 End of second line segment (2D).
        @return {Number} The side (1 or -1) of segment a on which segment b lies.
    */++cov_sp7mr9u21.s[269];PrairieGeom.prototype.lineSegmentOnSide=function(a0,a1,b0,b1){++cov_sp7mr9u21.f[56];++cov_sp7mr9u21.s[270];// make b point the same way as a
if(b1.subtract(b0).dot(a1.subtract(a0))<0){++cov_sp7mr9u21.b[34][0];var tmp=(++cov_sp7mr9u21.s[271],b1);++cov_sp7mr9u21.s[272];b1=b0;++cov_sp7mr9u21.s[273];b0=tmp;}else{++cov_sp7mr9u21.b[34][1];}var side;var a=(++cov_sp7mr9u21.s[274],a1.subtract(a0));var b=(++cov_sp7mr9u21.s[275],b1.subtract(b0));var bPerp=(++cov_sp7mr9u21.s[276],this.perp(b));var denom=(++cov_sp7mr9u21.s[277],a.dot(bPerp));++cov_sp7mr9u21.s[278];if(Math.abs(denom)<1e-8){++cov_sp7mr9u21.b[35][0];++cov_sp7mr9u21.s[279];// colinear
side=this.sign(this.cross2DOut(b0.subtract(a0),a));}else{++cov_sp7mr9u21.b[35][1];// fraction along (a0,a1) of the line intersection
var lambda=(++cov_sp7mr9u21.s[280],b0.subtract(a0).dot(bPerp)/denom);++cov_sp7mr9u21.s[281];if(Math.abs(lambda-0.5)>0.1){++cov_sp7mr9u21.b[36][0];++cov_sp7mr9u21.s[282];// intersection is not near center of segment a
side=this.sign(lambda-0.5)*this.sign(this.cross2DOut(a,b));}else{++cov_sp7mr9u21.b[36][1];// intersection near center of segment a
var c=(++cov_sp7mr9u21.s[283],a0.x(1-lambda).add(a1.x(lambda)));// intersection
// bf is b0 or b1, whichever is furthest from c
var bf=(++cov_sp7mr9u21.s[284],b1.subtract(c).modulus()>b0.subtract(c).modulus()?(++cov_sp7mr9u21.b[37][0],b1):(++cov_sp7mr9u21.b[37][1],b0));++cov_sp7mr9u21.s[285];side=this.sign(this.cross2DOut(bf.subtract(c),a));}}++cov_sp7mr9u21.s[286];if(side===0)// degenerate case
{++cov_sp7mr9u21.b[38][0];++cov_sp7mr9u21.s[287];side=1;}else{++cov_sp7mr9u21.b[38][1];}++cov_sp7mr9u21.s[288];return side;};/*****************************************************************************//** Return an identity transformation matrix.

        @return {Matrix} An identity transformation.
    */++cov_sp7mr9u21.s[289];PrairieGeom.prototype.identityTransform=function(){++cov_sp7mr9u21.f[57];++cov_sp7mr9u21.s[290];return Matrix.I(3);};/** Scale a transformation matrix.

        @param {Matrix} transform The original transformation.
        @param {Vector} factor Scale factors.
        @return {Matrix} The new transformation.
    */++cov_sp7mr9u21.s[291];PrairieGeom.prototype.scaleTransform=function(transform,factor){++cov_sp7mr9u21.f[58];++cov_sp7mr9u21.s[292];return transform.x($M([[factor.e(1),0,0],[0,factor.e(2),0],[0,0,1]]));};/** Translate a transformation matrix.

        @param {Matrix} transform The original transformation.
        @param {Vector} offset Translation offset (drawing coords).
        @return {Matrix} The new transformation.
    */++cov_sp7mr9u21.s[293];PrairieGeom.prototype.translateTransform=function(transform,offset){++cov_sp7mr9u21.f[59];++cov_sp7mr9u21.s[294];return transform.x($M([[1,0,offset.e(1)],[0,1,offset.e(2)],[0,0,1]]));};/** Rotate a transformation matrix.

        @param {Matrix} transform The original transformation.
        @param {number} angle Angle to rotate by (radians).
        @return {Matrix} The new transformation.
    */++cov_sp7mr9u21.s[295];PrairieGeom.prototype.rotateTransform=function(transform,angle){++cov_sp7mr9u21.f[60];++cov_sp7mr9u21.s[296];return transform.x(Matrix.RotationZ(angle));};/** Transform a transformation matrix (scale, translate, rotate) to
        match old points to new. Drawing at the old locations will result
        in points at the new locations.

        @param {Matrix} transform The original transformation.
        @param {Vector} old1 The old location of point 1.
        @param {Vector} old2 The old location of point 2.
        @param {Vector} new1 The new location of point 1.
        @param {Vector} new2 The new location of point 2.
        @return {Matrix} The new transformation.
    */++cov_sp7mr9u21.s[297];PrairieGeom.prototype.transformByPointsTransform=function(transform,old1,old2,new1,new2){++cov_sp7mr9u21.f[61];var oldMid=(++cov_sp7mr9u21.s[298],old1.add(old2).x(0.5));var newMid=(++cov_sp7mr9u21.s[299],new1.add(new2).x(0.5));var oldDelta=(++cov_sp7mr9u21.s[300],old2.subtract(old1));var newDelta=(++cov_sp7mr9u21.s[301],new2.subtract(new1));var factor=(++cov_sp7mr9u21.s[302],newDelta.modulus()/oldDelta.modulus());var angle=(++cov_sp7mr9u21.s[303],this.angleFrom(oldDelta,newDelta));var newTransform=(++cov_sp7mr9u21.s[304],transform);++cov_sp7mr9u21.s[305];newTransform=this.translateTransform(newTransform,newMid);++cov_sp7mr9u21.s[306];newTransform=this.rotateTransform(newTransform,angle);++cov_sp7mr9u21.s[307];newTransform=this.scaleTransform(newTransform,$V([factor,factor]));++cov_sp7mr9u21.s[308];newTransform=this.translateTransform(newTransform,oldMid.x(-1));++cov_sp7mr9u21.s[309];return newTransform;};/*****************************************************************************//** Transform a vector by a transformation matrix.

        @param {Matrix} transform The transformation matrix.
        @param {Vector} vec The vector.
        @return {Vector} The transformed vector.
    */++cov_sp7mr9u21.s[310];PrairieGeom.prototype.transformVec=function(transform,vec){++cov_sp7mr9u21.f[62];var v3=(++cov_sp7mr9u21.s[311],transform.x($V([vec.e(1),vec.e(2),0])));++cov_sp7mr9u21.s[312];return $V([v3.e(1),v3.e(2)]);};/** Transform a position by a transformation matrix.

        @param {Matrix} transform The transformation matrix.
        @param {Vector} pos The position.
        @return {Vector} The transformed position.
    */++cov_sp7mr9u21.s[313];PrairieGeom.prototype.transformPos=function(transform,pos){++cov_sp7mr9u21.f[63];var p3=(++cov_sp7mr9u21.s[314],transform.x($V([pos.e(1),pos.e(2),1])));++cov_sp7mr9u21.s[315];return $V([p3.e(1),p3.e(2)]);};/*****************************************************************************//** Return a 3D identity transformation matrix.

        @return {Matrix} A 3D identity transformation.
    */++cov_sp7mr9u21.s[316];PrairieGeom.prototype.identityTransform3D=function(){++cov_sp7mr9u21.f[64];++cov_sp7mr9u21.s[317];return Matrix.I(4);};/** Scale a 3D transformation matrix.

        @param {Matrix} transform The original 3D transformation.
        @param {Vector} factor Scale factor.
        @return {Matrix} The new 3D transformation.
    */++cov_sp7mr9u21.s[318];PrairieGeom.prototype.scaleTransform3D=function(transform,factor){++cov_sp7mr9u21.f[65];++cov_sp7mr9u21.s[319];return transform.x($M([[factor,0,0,0],[0,factor,0,0],[0,0,factor,0],[0,0,1]]));};/** Translate a 3D transformation matrix.

        @param {Matrix} transform The original 3D transformation.
        @param {Vector} offset Translation 3D offset.
        @return {Matrix} The new 3D transformation.
    */++cov_sp7mr9u21.s[320];PrairieGeom.prototype.translateTransform3D=function(transform,offset){++cov_sp7mr9u21.f[66];++cov_sp7mr9u21.s[321];return transform.x($M([[1,0,0,offset.e(1)],[0,1,0,offset.e(2)],[0,0,1,offset.e(3)],[0,0,0,1]]));};/** @private Extend a 3D matrix to a 4D matrix.

        @param {Matrix} mat3D The 3D matrix.
        @return {Matrix} mat4D The augmented 4D matrix.
    */++cov_sp7mr9u21.s[322];PrairieGeom.prototype.toM4=function(mat3D){++cov_sp7mr9u21.f[67];var r1=(++cov_sp7mr9u21.s[323],mat3D.row(1).elements);var r2=(++cov_sp7mr9u21.s[324],mat3D.row(2).elements);var r3=(++cov_sp7mr9u21.s[325],mat3D.row(3).elements);++cov_sp7mr9u21.s[326];r1.push(0);++cov_sp7mr9u21.s[327];r2.push(0);++cov_sp7mr9u21.s[328];r3.push(0);var r4=(++cov_sp7mr9u21.s[329],[0,0,0,1]);++cov_sp7mr9u21.s[330];return $M([r1,r2,r3,r4]);};/** Rotate a 3D transformation matrix about the X axis.

        @param {Matrix} transform The original 3D transformation.
        @param {number} angleX Angle to rotate by around the X axis (radians).
        @return {Matrix} The new 3D transformation.
    */++cov_sp7mr9u21.s[331];PrairieGeom.prototype.rotateTransform3DX=function(transform,angleX){++cov_sp7mr9u21.f[68];++cov_sp7mr9u21.s[332];return transform.x(this.toM4(Matrix.RotationX(angleX)));};/** Rotate a 3D transformation matrix about the Y axis.

        @param {Matrix} transform The original 3D transformation.
        @param {number} angleY Angle to rotate by around the Y axis (radians).
        @return {Matrix} The new 3D transformation.
    */++cov_sp7mr9u21.s[333];PrairieGeom.prototype.rotateTransform3DY=function(transform,angleY){++cov_sp7mr9u21.f[69];++cov_sp7mr9u21.s[334];return transform.x(this.toM4(Matrix.RotationY(angleY)));};/** Rotate a 3D transformation matrix about the Z axis.

        @param {Matrix} transform The original 3D transformation.
        @param {number} angleZ Angle to rotate by around the Z axis (radians).
        @return {Matrix} The new 3D transformation.
    */++cov_sp7mr9u21.s[335];PrairieGeom.prototype.rotateTransform3DZ=function(transform,angleZ){++cov_sp7mr9u21.f[70];++cov_sp7mr9u21.s[336];return transform.x(this.toM4(Matrix.RotationZ(angleZ)));};/** Rotate a 3D transformation matrix.

        @param {Matrix} transform The original 3D transformation.
        @param {number} angleX Angle to rotate by around the X axis (radians).
        @param {number} angleY Angle to rotate by around the Y axis (radians).
        @param {number} angleZ Angle to rotate by around the Z axis (radians).
        @return {Matrix} The new 3D transformation.
    */++cov_sp7mr9u21.s[337];PrairieGeom.prototype.rotateTransform3D=function(transform,angleX,angleY,angleZ){++cov_sp7mr9u21.f[71];++cov_sp7mr9u21.s[338];return this.rotateTransform3DZ(this.rotateTransform3DY(this.rotateTransform3DX(transform,angleX),angleY),angleZ);};/*****************************************************************************//** Transform a 3D vector by a 3D transformation matrix.

        @param {Matrix} transform The 3D transformation matrix.
        @param {Vector} vec The 3D vector.
        @return {Vector} The transformed 3D vector.
    */++cov_sp7mr9u21.s[339];PrairieGeom.prototype.transformVec3D=function(transform,vec){++cov_sp7mr9u21.f[72];var v4=(++cov_sp7mr9u21.s[340],transform.x($V([vec.e(1),vec.e(2),vec.e(3),0])));++cov_sp7mr9u21.s[341];return $V([v4.e(1),v4.e(2),v4.e(3)]);};/** Transform a 3D position by a 3D transformation matrix.

        @param {Matrix} transform The 3D transformation matrix.
        @param {Vector} pos The 3D position.
        @return {Vector} The transformed 3D position.
    */++cov_sp7mr9u21.s[342];PrairieGeom.prototype.transformPos3D=function(transform,pos){++cov_sp7mr9u21.f[73];var p4=(++cov_sp7mr9u21.s[343],transform.x($V([pos.e(1),pos.e(2),pos.e(3),1])));++cov_sp7mr9u21.s[344];return $V([p4.e(1),p4.e(2),p4.e(3)]);};/** Transform a 3D position to a 2D position by an orthographic projection.

        @param {Vector} pos The 3D position.
        @return {Vector} The transformed 3D position.
    */++cov_sp7mr9u21.s[345];PrairieGeom.prototype.orthProjPos3D=function(pos){++cov_sp7mr9u21.f[74];++cov_sp7mr9u21.s[346];return $V([pos.e(1),pos.e(2)]);};/*****************************************************************************//** Compute the sup-norm of a vector.

        @param {Vector} vector The vector to find the norm of.
        @return {number} The sup-norm.
    */++cov_sp7mr9u21.s[347];PrairieGeom.prototype.supNorm=function(vector){++cov_sp7mr9u21.f[75];++cov_sp7mr9u21.s[348];return Math.abs(vector.max());};/** Take a cross product between an out-of-plane vector and a 2D vector.

        @param {Number} v1k Out-of-plane component of the first vector.
        @param {Vector} v2ij In-plane components of the second vector.
        @return {Vector} A 2D vector given by v1 x v2.
    */++cov_sp7mr9u21.s[349];PrairieGeom.prototype.cross2D=function(v1k,v2ij){++cov_sp7mr9u21.f[76];++cov_sp7mr9u21.s[350];return $V([-v1k*v2ij.e(2),v1k*v2ij.e(1)]);};/** Take a cross product between two 2D vectors.

        @param {Vector} v1 First 2D vector.
        @param {Vector} v2 Second 2D vector.
        @return {Number} The third component of the cross product.
    */++cov_sp7mr9u21.s[351];PrairieGeom.prototype.cross2DOut=function(v1,v2){++cov_sp7mr9u21.f[77];++cov_sp7mr9u21.s[352];return v1.e(1)*v2.e(2)-v1.e(2)*v2.e(1);};/** Create a 2D unit vector pointing at a given angle.

        @param {number} angle The counterclockwise angle from the positive x axis (radians).
        @return {Vector} A unit vector in direction angle.
    */++cov_sp7mr9u21.s[353];PrairieGeom.prototype.vector2DAtAngle=function(angle){++cov_sp7mr9u21.f[78];++cov_sp7mr9u21.s[354];return $V([Math.cos(angle),Math.sin(angle)]);};/** Find the counterclockwise angle of the vector from the x axis.

        @param {Vector} vec The vector to find the angle of.
        @return {number} The counterclockwise angle of vec from the x axis.
    */++cov_sp7mr9u21.s[355];PrairieGeom.prototype.angleOf=function(vec){++cov_sp7mr9u21.f[79];var a=(++cov_sp7mr9u21.s[356],Math.atan2(vec.e(2),vec.e(1)));++cov_sp7mr9u21.s[357];if(a<0){++cov_sp7mr9u21.b[39][0];++cov_sp7mr9u21.s[358];a=a+2*Math.PI;}else{++cov_sp7mr9u21.b[39][1];}++cov_sp7mr9u21.s[359];return a;};/** Find the counterclockwise angle from the vector vFrom to the vector vTo.

        @param {Vector} vFrom The starting vector.
        @param {Vector} vTo The ending vector.
        @return {number} The counterclockwise angle from vFrom to vTo.
    */++cov_sp7mr9u21.s[360];PrairieGeom.prototype.angleFrom=function(vFrom,vTo){++cov_sp7mr9u21.f[80];++cov_sp7mr9u21.s[361];return this.angleOf(vTo)-this.angleOf(vFrom);};/** Return a textual description of a direction angle (to within 45 degrees).

        @param {Number} angle The angle.
        @return {String} A description of the direction.
    */++cov_sp7mr9u21.s[362];PrairieGeom.prototype.dirDescription=function(angle){++cov_sp7mr9u21.f[81];var dir=(++cov_sp7mr9u21.s[363],Math.round(angle/(2*Math.PI)*8));++cov_sp7mr9u21.s[364];dir=this.fixedMod(dir,8);var dirDescriptions=(++cov_sp7mr9u21.s[365],["rightwards","up and right","upwards","up and left","leftwards","down and left","downwards","down and right"]);++cov_sp7mr9u21.s[366];return dirDescriptions[dir];};/** Determine a triangle angle from the three side lengths.

        @param {number} a First adjacent side length.
        @param {number} b Second adjacent side length.
        @param {number} c Opposite side length.
        @return {number} The angle C opposite to side c.
    */++cov_sp7mr9u21.s[367];PrairieGeom.prototype.cosLawAngle=function(a,b,c){++cov_sp7mr9u21.f[82];++cov_sp7mr9u21.s[368];if((++cov_sp7mr9u21.b[41][0],a>0)&&(++cov_sp7mr9u21.b[41][1],b>0)){++cov_sp7mr9u21.b[40][0];var C=(++cov_sp7mr9u21.s[369],Math.acos((a*a+b*b-c*c)/(2*a*b)));++cov_sp7mr9u21.s[370];return C;}else{++cov_sp7mr9u21.b[40][1];++cov_sp7mr9u21.s[371];return 0;}};/** Determine a triangle side length from two side lengths and the included angle.

        @param {number} a First adjacent side length.
        @param {number} b Second adjacent side length.
        @param {number} C Angle between sides a and b.
        @return {number} The side length c opposite to angle C.
    */++cov_sp7mr9u21.s[372];PrairieGeom.prototype.cosLawLength=function(a,b,C){++cov_sp7mr9u21.f[83];var c=(++cov_sp7mr9u21.s[373],Math.sqrt(a*a+b*b-2*a*b*Math.cos(C)));++cov_sp7mr9u21.s[374];return c;};/** Return the sign of the argument.

        @param {number} x The argument to find the sign of.
        @return {number} Either -1/0/+1 if x is negative/zero/positive.
    */++cov_sp7mr9u21.s[375];PrairieGeom.prototype.sign=function(x){++cov_sp7mr9u21.f[84];++cov_sp7mr9u21.s[376];if(x>0){++cov_sp7mr9u21.b[42][0];++cov_sp7mr9u21.s[377];return 1;}else{++cov_sp7mr9u21.b[42][1];++cov_sp7mr9u21.s[378];if(x<0){++cov_sp7mr9u21.b[43][0];++cov_sp7mr9u21.s[379];return-1;}else{++cov_sp7mr9u21.b[43][1];++cov_sp7mr9u21.s[380];return 0;}}};/** Linearly interpolate between two numbers.

        @param {number} x0 The first number.
        @param {number} x1 The second number.
        @param {number} alpha The proportion of x1 versus x0 (between 0 and 1).
        @return {number} The quanity (1 - alpha) * x0 + alpha * x1.
    */++cov_sp7mr9u21.s[381];PrairieGeom.prototype.linearInterp=function(x0,x1,alpha){++cov_sp7mr9u21.f[85];++cov_sp7mr9u21.s[382];return(1-alpha)*x0+alpha*x1;};/** Linearly symmetrically interpolate between two numbers (-1 to 1).

        @param {number} x0 The first number.
        @param {number} x1 The second number.
        @param {number} alpha The proportion of x1 versus x0 (between -1 and 1).
        @return {number} The quanity 0.5 * (1 - alpha) * x0 + 0.5 * (1 + alpha) * x1.
    */++cov_sp7mr9u21.s[383];PrairieGeom.prototype.linearSymInterp=function(x0,x1,alpha){++cov_sp7mr9u21.f[86];++cov_sp7mr9u21.s[384];return 0.5*(1-alpha)*x0+0.5*(1+alpha)*x1;};/** Linearly de-interpolate between two numbers.

        @param {number} x0 The first number.
        @param {number} x1 The second number.
        @param {number} x The value to be de-interpolated.
        @return {number} The value alpha so that x = linearInterp(x0, x1, alpha).
    */++cov_sp7mr9u21.s[385];PrairieGeom.prototype.linearDeinterp=function(x0,x1,x){++cov_sp7mr9u21.f[87];++cov_sp7mr9u21.s[386];return(x-x0)/(x1-x0);};/** Linearly map based on two points.

        @param {number} x0 The first number.
        @param {number} x1 The second number.
        @param {number} y0 The image of x0.
        @param {number} y1 The image of y1.
        @param {number} x The value to be mapped.
        @param {number} The value y that x maps to.
    */++cov_sp7mr9u21.s[387];PrairieGeom.prototype.linearMap=function(x0,x1,y0,y1,x){++cov_sp7mr9u21.f[88];++cov_sp7mr9u21.s[388];return this.linearInterp(y0,y1,this.linearDeinterp(x0,x1,x));};/** Linearly interpolate between two vectors.

        @param {Vector} x0 The first vector.
        @param {Vector} x1 The second vector.
        @param {number} alpha The proportion of x1 versus x0 (between 0 and 1).
        @return {number} The quanity (1 - alpha) * x0 + alpha * x1.
    */++cov_sp7mr9u21.s[389];PrairieGeom.prototype.linearInterpVector=function(x0,x1,alpha){++cov_sp7mr9u21.f[89];++cov_sp7mr9u21.s[390];return x0.x(1-alpha).add(x1.x(alpha));};/** Linearly symmetrically interpolate between two vectors (-1 to 1).

        @param {Vector} x0 The first vector.
        @param {Vector} x1 The second vector.
        @param {number} alpha The proportion of x1 versus x0 (between -1 and 1).
        @return {number} The quanity 0.5 * (1 - alpha) * x0 + 0.5 * (1 + alpha) * x1.
    */++cov_sp7mr9u21.s[391];PrairieGeom.prototype.linearSymInterpVector=function(x0,x1,alpha){++cov_sp7mr9u21.f[90];++cov_sp7mr9u21.s[392];return x0.x(0.5*(1-alpha)).add(x1.x(0.5*(1+alpha)));};/** Linearly interpolate between two arrays.

        @param {Array} a0 The first array.
        @param {Array} a1 The second array.
        @param {number} alpha The proportion of a1 versus a0 (between 0 and 1).
        @return {Array} The state (1 - alpha) * a0 + alpha * a1.
    */++cov_sp7mr9u21.s[393];PrairieGeom.prototype.linearInterpArray=function(a0,a1,alpha){++cov_sp7mr9u21.f[91];var newArray=(++cov_sp7mr9u21.s[394],[]);++cov_sp7mr9u21.s[395];for(var i=0;i<Math.min(a0.length,a1.length);i++){++cov_sp7mr9u21.s[396];newArray.push(this.linearInterp(a0[i],a1[i],alpha));}++cov_sp7mr9u21.s[397];return newArray;};/** Linearly interpolate between two states (objects with scalar members).

        @param {Object} s0 The first state.
        @param {Object} s1 The second state.
        @param {number} alpha The proportion of s1 versus s0 (between 0 and 1).
        @return {Object} The state (1 - alpha) * s0 + alpha * s1.
    */++cov_sp7mr9u21.s[398];PrairieGeom.prototype.linearInterpState=function(s0,s1,alpha){++cov_sp7mr9u21.f[92];var newState=(++cov_sp7mr9u21.s[399],{});++cov_sp7mr9u21.s[400];for(var e in s0){++cov_sp7mr9u21.s[401];newState[e]=this.linearInterp(s0[e],s1[e],alpha);}++cov_sp7mr9u21.s[402];return newState;};/** Duplicate a state (object with scalar membes).

        @param {Object} state The state to duplicate.
        @return {number} A copy of the state.
    */++cov_sp7mr9u21.s[403];PrairieGeom.prototype.dupState=function(state){++cov_sp7mr9u21.f[93];var newState=(++cov_sp7mr9u21.s[404],{});++cov_sp7mr9u21.s[405];for(var e in state){++cov_sp7mr9u21.s[406];newState[e]=state[e];}++cov_sp7mr9u21.s[407];return newState;};/*****************************************************************************//* Evaluate the position of a cubic Bezier curve.

       @param {Number} t The time in [0,1].
       @param {Vector} p0 The starting point.
       @param {Vector} p1 The first control point.
       @param {Vector} p2 The second control point.
       @param {Vector} p3 The ending point.
       @return {Vector} The curve position at time t.
    */++cov_sp7mr9u21.s[408];PrairieGeom.prototype.cubicBezierPos=function(t,p0,p1,p2,p3){++cov_sp7mr9u21.f[94];++cov_sp7mr9u21.s[409];return p0.x(Math.pow(1-t,3)).add(p1.x(3*t*Math.pow(1-t,2))).add(p2.x(3*(1-t)*Math.pow(t,2))).add(p3.x(Math.pow(t,3)));};/* Evaluate the derviative of a cubic Bezier curve.

       @param {Number} t The time in [0,1].
       @param {Vector} p0 The starting point.
       @param {Vector} p1 The first control point.
       @param {Vector} p2 The second control point.
       @param {Vector} p3 The ending point.
       @return {Vector} The curve derivative at time t.
    */++cov_sp7mr9u21.s[410];PrairieGeom.prototype.cubicBezierVel=function(t,p0,p1,p2,p3){++cov_sp7mr9u21.f[95];var v0=(++cov_sp7mr9u21.s[411],p1.subtract(p0));var v1=(++cov_sp7mr9u21.s[412],p2.subtract(p1));var v2=(++cov_sp7mr9u21.s[413],p3.subtract(p2));++cov_sp7mr9u21.s[414];return v0.x(3*Math.pow(1-t,2)).add(v1.x(6*(1-t)*t)).add(v2.x(3*Math.pow(t,2)));};/* Evaluate the second derivative of a cubic Bezier curve.

       @param {Number} t The time in [0,1].
       @param {Vector} p0 The starting point.
       @param {Vector} p1 The first control point.
       @param {Vector} p2 The second control point.
       @param {Vector} p3 The ending point.
       @return {Vector} The curve second derviative at time t.
    */++cov_sp7mr9u21.s[415];PrairieGeom.prototype.cubicBezierAcc=function(t,p0,p1,p2,p3){++cov_sp7mr9u21.f[96];var a0=(++cov_sp7mr9u21.s[416],p2.subtract(p1.x(2)).add(p0));var a1=(++cov_sp7mr9u21.s[417],p3.subtract(p2.x(2)).add(p1));++cov_sp7mr9u21.s[418];return a0.x(6*(1-t)).add(a1.x(6*t));};/*****************************************************************************/++cov_sp7mr9u21.s[419];PrairieGeom.prototype.numDiff=function(f,t){++cov_sp7mr9u21.f[97];var eps=(++cov_sp7mr9u21.s[420],1e-4);var x0=(++cov_sp7mr9u21.s[421],f(t-eps));var x1=(++cov_sp7mr9u21.s[422],f(t));var x2=(++cov_sp7mr9u21.s[423],f(t+eps));var d=(++cov_sp7mr9u21.s[424],{});++cov_sp7mr9u21.s[425];d.diff={};++cov_sp7mr9u21.s[426];d.ddiff={};++cov_sp7mr9u21.s[427];for(var e in x0){++cov_sp7mr9u21.s[428];if(x0[e]instanceof Vector){++cov_sp7mr9u21.b[44][0];++cov_sp7mr9u21.s[429];d[e]=x1[e];++cov_sp7mr9u21.s[430];d.diff[e]=x1[e].subtract(x0[e]).x(1/eps);++cov_sp7mr9u21.s[431];d.ddiff[e]=x2[e].subtract(x1[e].x(2)).add(x0[e]).x(1/(eps*eps));}else{++cov_sp7mr9u21.b[44][1];++cov_sp7mr9u21.s[432];d[e]=x1[e];++cov_sp7mr9u21.s[433];d.diff[e]=(x1[e]-x0[e])/eps;++cov_sp7mr9u21.s[434];d.ddiff[e]=(x2[e]-2*x1[e]+x0[e])/(eps*eps);}}++cov_sp7mr9u21.s[435];return d;};/*****************************************************************************//** Find the output angle beta for a four-bar linkage.

        @param {number} g Ground link length.
        @param {number} f Input link length.
        @param {number} a Output link length.
        @param {number} b Floating link length.
        @param {number} alpha Input angle.
        @param {bool} flipped Whether the output-floating triangle is flipped.
        @return {number} Output angle beta.
    */++cov_sp7mr9u21.s[436];PrairieGeom.prototype.solveFourBar=function(g,f,a,b,alpha,flipped){++cov_sp7mr9u21.f[98];var l=(++cov_sp7mr9u21.s[437],this.cosLawLength(a,g,alpha));var beta1=(++cov_sp7mr9u21.s[438],this.cosLawAngle(g,l,a));var beta2=(++cov_sp7mr9u21.s[439],this.cosLawAngle(l,b,f));++cov_sp7mr9u21.s[440];if(Math.sin(alpha)>0){++cov_sp7mr9u21.b[45][0];++cov_sp7mr9u21.s[441];if(flipped){++cov_sp7mr9u21.b[46][0];++cov_sp7mr9u21.s[442];return Math.PI-beta1+beta2;}else{++cov_sp7mr9u21.b[46][1];++cov_sp7mr9u21.s[443];return Math.PI-beta1-beta2;}}else{++cov_sp7mr9u21.b[45][1];++cov_sp7mr9u21.s[444];if(flipped){++cov_sp7mr9u21.b[47][0];++cov_sp7mr9u21.s[445];return Math.PI+beta1+beta2;}else{++cov_sp7mr9u21.b[47][1];++cov_sp7mr9u21.s[446];return Math.PI+beta1-beta2;}}};/*****************************************************************************//** Covert an array of offsets to absolute points.

        @param {Array} offsets A list of offset vectors.
        @return {Array} The corresponding absolute points.
    */++cov_sp7mr9u21.s[447];PrairieGeom.prototype.offsets2Points=function(offsets){++cov_sp7mr9u21.f[99];var points=(++cov_sp7mr9u21.s[448],[]);++cov_sp7mr9u21.s[449];if(offsets.length<1){++cov_sp7mr9u21.b[48][0];++cov_sp7mr9u21.s[450];return;}else{++cov_sp7mr9u21.b[48][1];}++cov_sp7mr9u21.s[451];points[0]=offsets[0].dup();++cov_sp7mr9u21.s[452];for(var i=1;i<offsets.length;i++){++cov_sp7mr9u21.s[453];points[i]=points[i-1].add(offsets[i]);}++cov_sp7mr9u21.s[454];return points;};/** Rotate a list of points by a given angle.

        @param {Array} points A list of points.
        @param {number} angle The angle to rotate by (radians, counterclockwise).
        @return {Array} A list of rotated points.
    */++cov_sp7mr9u21.s[455];PrairieGeom.prototype.rotatePoints=function(points,angle){++cov_sp7mr9u21.f[100];var rotM=(++cov_sp7mr9u21.s[456],Matrix.RotationZ(angle));var newPoints=(++cov_sp7mr9u21.s[457],[]),p;++cov_sp7mr9u21.s[458];for(var i=0;i<points.length;i++){++cov_sp7mr9u21.s[459];p=rotM.x($V([points[i].e(1),points[i].e(2),0]));++cov_sp7mr9u21.s[460];newPoints.push($V([p.e(1),p.e(2)]));}++cov_sp7mr9u21.s[461];return newPoints;};/** Translate a list of points by a given offset.

        @param {Array} points A list of points.
        @param {Vector} offset The offset to translate by.
        @return {Array} A list of translated points.
    */++cov_sp7mr9u21.s[462];PrairieGeom.prototype.translatePoints=function(points,offset){++cov_sp7mr9u21.f[101];var newPoints=(++cov_sp7mr9u21.s[463],[]);++cov_sp7mr9u21.s[464];for(var i=0;i<points.length;i++){++cov_sp7mr9u21.s[465];newPoints.push(points[i].add(offset));}++cov_sp7mr9u21.s[466];return newPoints;};/** Scale a list of points by given horizontal and vertical factors.

        @param {Array} points A list of points.
        @param {Vector} scale The scale in each component.
        @return {Array} A list of scaled points.
    */++cov_sp7mr9u21.s[467];PrairieGeom.prototype.scalePoints=function(points,scale){++cov_sp7mr9u21.f[102];var newPoints=(++cov_sp7mr9u21.s[468],[]),p;++cov_sp7mr9u21.s[469];for(var i=0;i<points.length;i++){++cov_sp7mr9u21.s[470];p=$V([points[i].e(1)*scale.e(1),points[i].e(2)*scale.e(2)]);++cov_sp7mr9u21.s[471];newPoints.push(p);}++cov_sp7mr9u21.s[472];return newPoints;};/** Print a list of points to the console as an array of vectors.

        @param {string} name The name of the array.
        @param {Array} points A list of points.
        @param {number} numDecPlaces The number of decimal places to print.
    */++cov_sp7mr9u21.s[473];PrairieGeom.prototype.printPoints=function(name,points,numDecPlaces){++cov_sp7mr9u21.f[103];++cov_sp7mr9u21.s[474];console.log(name+": [");++cov_sp7mr9u21.s[475];for(var i=0;i<points.length;i++){++cov_sp7mr9u21.s[476];/* jshint laxbreak: true */console.log("$V(["+points[i].e(1).toFixed(numDecPlaces)+", "+points[i].e(2).toFixed(numDecPlaces)+"]),");}++cov_sp7mr9u21.s[477];console.log("],");};/*****************************************************************************//** Evaluate a polynomial at a point.

        @param {Array} poly The coefficient array [a_0, a_1, ..., a_n].
        @param {Number} x The independent variable value to evaluate at.
        @return {Number} The value of the polynomial at x.
    */++cov_sp7mr9u21.s[478];PrairieGeom.prototype.evalPoly=function(poly,x){++cov_sp7mr9u21.f[104];var i,y=(++cov_sp7mr9u21.s[479],0);++cov_sp7mr9u21.s[480];for(i=0;i<poly.length;i++){++cov_sp7mr9u21.s[481];y+=poly[i]*Math.pow(x,i);}++cov_sp7mr9u21.s[482];return y;};/** Evaluate an array of polynomials at a point.

        @param {Array} polyArray The array of polynomials [p1, p2, ...].
        @param {Number} x The independent variable value to evaluate at.
        @return {Array} The value of the polynomials at x [p1(x), p2(x), ...].
    */++cov_sp7mr9u21.s[483];PrairieGeom.prototype.evalPolyArray=function(polyArray,x){++cov_sp7mr9u21.f[105];var i,yArray=(++cov_sp7mr9u21.s[484],[]);++cov_sp7mr9u21.s[485];for(i=0;i<polyArray.length;i++){++cov_sp7mr9u21.s[486];yArray.push(this.evalPoly(polyArray[i],x));}++cov_sp7mr9u21.s[487];return yArray;};/** Differentiate a polynomial.

        @param {Array} poly The coefficient array [a_0, a_1, ..., a_n].
        @return {Array} The coefficient array of the derivative polynomial [a_1, 2 * a_2, ...].
    */++cov_sp7mr9u21.s[488];PrairieGeom.prototype.diffPoly=function(poly){++cov_sp7mr9u21.f[106];var i,d=(++cov_sp7mr9u21.s[489],[]);++cov_sp7mr9u21.s[490];if(poly.length<2){++cov_sp7mr9u21.b[49][0];++cov_sp7mr9u21.s[491];return[0];}else{++cov_sp7mr9u21.b[49][1];}++cov_sp7mr9u21.s[492];for(i=1;i<poly.length;i++){++cov_sp7mr9u21.s[493];d.push(i*poly[i]);}++cov_sp7mr9u21.s[494];return d;};/** Differentiate an array of polynomials.

        @param {Array} polyArray The array of polynomials [p1, p2, ...].
        @return {Array} The derivatives of the polynomials [p1', p2', ...].
    */++cov_sp7mr9u21.s[495];PrairieGeom.prototype.diffPolyArray=function(polyArray){++cov_sp7mr9u21.f[107];var i,dArray=(++cov_sp7mr9u21.s[496],[]);++cov_sp7mr9u21.s[497];for(i=0;i<polyArray.length;i++){++cov_sp7mr9u21.s[498];dArray.push(this.diffPoly(polyArray[i]));}++cov_sp7mr9u21.s[499];return dArray;};/** Integrate a polynomial.

        @param {Array} poly The coefficient array [a_0, a_1, ..., a_n].
        @return {Array} The coefficient array of the integrated polynomial [0, a_0, a_1 / 2, ...].
    */++cov_sp7mr9u21.s[500];PrairieGeom.prototype.intPoly=function(poly){++cov_sp7mr9u21.f[108];var i,a=(++cov_sp7mr9u21.s[501],[0]);++cov_sp7mr9u21.s[502];for(i=0;i<poly.length;i++){++cov_sp7mr9u21.s[503];a.push(poly[i]/(i+1));}++cov_sp7mr9u21.s[504];return a;};/** Integrate an array of polynomials.

        @param {Array} polyArray The array of polynomials [p1, p2, ...].
        @return {Array} The integrals of the polynomials [\int p1, \int p2, ...].
    */++cov_sp7mr9u21.s[505];PrairieGeom.prototype.intPolyArray=function(polyArray){++cov_sp7mr9u21.f[109];var i,aArray=(++cov_sp7mr9u21.s[506],[]);++cov_sp7mr9u21.s[507];for(i=0;i<polyArray.length;i++){++cov_sp7mr9u21.s[508];aArray.push(this.intPoly(polyArray[i]));}++cov_sp7mr9u21.s[509];return aArray;};/** Multiply (convolve) two polynomials.

        @param {Array} poly1 The coefficient array [a_0, a_1, ..., a_n].
        @param {Array} poly2 The coefficient array [b_0, b_1, ..., b_n].
        @return {Array} The product polynomial.
    */++cov_sp7mr9u21.s[510];PrairieGeom.prototype.prodPoly=function(poly1,poly2){++cov_sp7mr9u21.f[110];var p=(++cov_sp7mr9u21.s[511],[]),i,j;++cov_sp7mr9u21.s[512];for(i=0;i<poly1.length+poly2.length-1;i++){++cov_sp7mr9u21.s[513];p.push(0);}++cov_sp7mr9u21.s[514];for(i=0;i<poly1.length;i++){++cov_sp7mr9u21.s[515];for(j=0;j<poly2.length;j++){++cov_sp7mr9u21.s[516];p[i+j]+=poly1[i]*poly2[j];}}++cov_sp7mr9u21.s[517];return p;};/*****************************************************************************//** Evaluate an exponential at a point.

        @param {Object} exp The exponential object.
        @param {Number} x The independent variable value to evaluate at.
        @return {Number} The value of the function at x.
    */++cov_sp7mr9u21.s[518];PrairieGeom.prototype.evalExp=function(exp,x){++cov_sp7mr9u21.f[111];++cov_sp7mr9u21.s[519];return exp.coeff*Math.exp(exp.exp*x);};/** Differentiate an exponential.

        @param {Object} exp The exponential object.
        @return {Object} The derivative object.
    */++cov_sp7mr9u21.s[520];PrairieGeom.prototype.diffExp=function(exp){++cov_sp7mr9u21.f[112];++cov_sp7mr9u21.s[521];return{coeff:exp.coeff*exp.exp,exp:exp.exp};};/** Integrate an exponential.

        @param {Object} exp The exponential object.
        @return {Object} The integral object.
    */++cov_sp7mr9u21.s[522];PrairieGeom.prototype.intExp=function(exp){++cov_sp7mr9u21.f[113];++cov_sp7mr9u21.s[523];return{coeff:exp.coeff/exp.exp,exp:exp.exp};};/*****************************************************************************//** Evaluate a trig function at a point.

        @param {Object} trig The trig function object.
        @param {Number} x The independent variable value to evaluate at.
        @return {Number} The value of the function at x.
    */++cov_sp7mr9u21.s[524];PrairieGeom.prototype.evalTrig=function(trig,x){++cov_sp7mr9u21.f[114];++cov_sp7mr9u21.s[525];if(trig.fcn==="sin"){++cov_sp7mr9u21.b[50][0];++cov_sp7mr9u21.s[526];return trig.coeff*Math.sin(trig.freq*x);}else{++cov_sp7mr9u21.b[50][1];++cov_sp7mr9u21.s[527];return trig.coeff*Math.cos(trig.freq*x);}};/** Differentiate a trig function.

        @param {Object} trig The trig function object.
        @return {Object} The derivative object.
    */++cov_sp7mr9u21.s[528];PrairieGeom.prototype.diffTrig=function(trig){++cov_sp7mr9u21.f[115];++cov_sp7mr9u21.s[529];if(trig.fcn==="sin"){++cov_sp7mr9u21.b[51][0];++cov_sp7mr9u21.s[530];return{coeff:trig.coeff*trig.freq,fcn:"cos",freq:trig.freq};}else{++cov_sp7mr9u21.b[51][1];++cov_sp7mr9u21.s[531];return{coeff:-trig.coeff*trig.freq,fcn:"sin",freq:trig.freq};}};/** Integrate a trig function.

        @param {Object} trig The trig function object.
        @return {Object} The integral object.
    */++cov_sp7mr9u21.s[532];PrairieGeom.prototype.intTrig=function(trig){++cov_sp7mr9u21.f[116];++cov_sp7mr9u21.s[533];if(trig.fcn==="sin"){++cov_sp7mr9u21.b[52][0];++cov_sp7mr9u21.s[534];return{coeff:-trig.coeff/trig.freq,fcn:"cos",freq:trig.freq};}else{++cov_sp7mr9u21.b[52][1];++cov_sp7mr9u21.s[535];return{coeff:trig.coeff/trig.freq,fcn:"sin",freq:trig.freq};}};/*****************************************************************************//** Evaluate a function at a point.

        @param {Object} fcn The function object.
        @param {Number} x The independent variable value to evaluate at.
        @return {Number} The value of the function at x.
    */++cov_sp7mr9u21.s[536];PrairieGeom.prototype.evalFcn=function(fcn,x){++cov_sp7mr9u21.f[117];++cov_sp7mr9u21.s[537];/* jshint indent: false */switch(fcn.fcn){case"poly":++cov_sp7mr9u21.b[53][0];++cov_sp7mr9u21.s[538];return this.evalPoly(fcn.data,x);case"exp":++cov_sp7mr9u21.b[53][1];++cov_sp7mr9u21.s[539];return this.evalExp(fcn.data,x);case"trig":++cov_sp7mr9u21.b[53][2];++cov_sp7mr9u21.s[540];return this.evalTrig(fcn.data,x);}};/** Differentiate a function.

        @param {Object} fcn The function object.
        @return {Object} The derivative object.
    */++cov_sp7mr9u21.s[541];PrairieGeom.prototype.diffFcn=function(fcn){++cov_sp7mr9u21.f[118];++cov_sp7mr9u21.s[542];/* jshint indent: false */switch(fcn.fcn){case"poly":++cov_sp7mr9u21.b[54][0];++cov_sp7mr9u21.s[543];return{fcn:"poly",data:this.diffPoly(fcn.data)};case"exp":++cov_sp7mr9u21.b[54][1];++cov_sp7mr9u21.s[544];return{fcn:"exp",data:this.diffExp(fcn.data)};case"trig":++cov_sp7mr9u21.b[54][2];++cov_sp7mr9u21.s[545];return{fcn:"trig",data:this.diffTrig(fcn.data)};}};/** Integrate a function.

        @param {Object} fcn The function object.
        @return {Object} The integral object.
    */++cov_sp7mr9u21.s[546];PrairieGeom.prototype.intFcn=function(fcn){++cov_sp7mr9u21.f[119];++cov_sp7mr9u21.s[547];/* jshint indent: false */switch(fcn.fcn){case"poly":++cov_sp7mr9u21.b[55][0];++cov_sp7mr9u21.s[548];return{fcn:"poly",data:this.intPoly(fcn.data)};case"exp":++cov_sp7mr9u21.b[55][1];++cov_sp7mr9u21.s[549];return{fcn:"exp",data:this.intExp(fcn.data)};case"trig":++cov_sp7mr9u21.b[55][2];++cov_sp7mr9u21.s[550];return{fcn:"trig",data:this.intTrig(fcn.data)};}};/*****************************************************************************//** Evaluate an array of functions at a point.

        @param {Array} arr The array of function object.
        @param {Number} x The independent variable value to evaluate at.
        @return {Array} The arry of values of the functions at x.
    */++cov_sp7mr9u21.s[551];PrairieGeom.prototype.evalFcnArray=function(arr,x){++cov_sp7mr9u21.f[120];var yArr=(++cov_sp7mr9u21.s[552],[]);++cov_sp7mr9u21.s[553];for(var i=0;i<arr.length;i++){++cov_sp7mr9u21.s[554];yArr.push(this.evalFcn(arr[i],x));}++cov_sp7mr9u21.s[555];return yArr;};/** Differentiate an array of functions.

        @param {Array} arr The array of function objects.
        @return {Array} The array of derivative objects.
    */++cov_sp7mr9u21.s[556];PrairieGeom.prototype.diffFcnArray=function(arr){++cov_sp7mr9u21.f[121];var dArr=(++cov_sp7mr9u21.s[557],[]);++cov_sp7mr9u21.s[558];for(var i=0;i<arr.length;i++){++cov_sp7mr9u21.s[559];dArr.push(this.diffFcn(arr[i]));}++cov_sp7mr9u21.s[560];return dArr;};/*****************************************************************************//** Compute the vector angle error.

        @param {Vector} exact The exact value.
        @param {Vector} approx The approximate value.
        @return {Number} The angle error between the exact and approximate values (radians).
    */++cov_sp7mr9u21.s[561];PrairieGeom.prototype.angleError=function(exact,approx){++cov_sp7mr9u21.f[122];++cov_sp7mr9u21.s[562];return exact.angleFrom(approx);};/** Compute the vector magnitude error.

        @param {Vector} exact The exact value.
        @param {Vector} approx The approximate value.
        @return {Number} The magnitude error between the exact and approximate values.
    */++cov_sp7mr9u21.s[563];PrairieGeom.prototype.magError=function(exact,approx){++cov_sp7mr9u21.f[123];++cov_sp7mr9u21.s[564];return Math.abs(exact.modulus()-approx.modulus());};/** Compute the relative vector magnitude error.

        @param {Vector} exact The exact value.
        @param {Vector} approx The approximate value.
        @return {Number} The relative magnitude error between the exact and approximate values.
    */++cov_sp7mr9u21.s[565];PrairieGeom.prototype.relMagError=function(exact,approx){++cov_sp7mr9u21.f[124];++cov_sp7mr9u21.s[566];return this.relError(exact.modulus(),approx.modulus());};/** Transform an error in [0,Inf) to a score in [0,1], with error = tol mapping to score = 0.5. Also works for arrays of errors and tols.

        @param {Number} error The error value (or an array of error values).
        @param {Number} tol The tolerance to accept as correct (or an array of tolerances).
        @return {Number} The score (1 = no error, 0.5 = error is exactly tol, for arrays the pointwise minimum score is used).
    */++cov_sp7mr9u21.s[567];PrairieGeom.prototype.errorToScore=function(error,tol){++cov_sp7mr9u21.f[125];++cov_sp7mr9u21.s[568];if((++cov_sp7mr9u21.b[57][0],_.isNumber(error))&&(++cov_sp7mr9u21.b[57][1],_.isNumber(tol))){++cov_sp7mr9u21.b[56][0];var alpha=(++cov_sp7mr9u21.s[569],error/tol);++cov_sp7mr9u21.s[570];if(alpha<1){++cov_sp7mr9u21.b[58][0];++cov_sp7mr9u21.s[571];return 1-0.5*alpha;}else{++cov_sp7mr9u21.b[58][1];++cov_sp7mr9u21.s[572];return 0.5*Math.exp(1-alpha);}}else{++cov_sp7mr9u21.b[56][1];++cov_sp7mr9u21.s[573];if((++cov_sp7mr9u21.b[60][0],_.isArray(error))&&(++cov_sp7mr9u21.b[60][1],_.isArray(tol))){++cov_sp7mr9u21.b[59][0];var score=(++cov_sp7mr9u21.s[574],1);++cov_sp7mr9u21.s[575];for(var i=0;i<error.length;i++){++cov_sp7mr9u21.s[576];score=Math.min(score,this.errorToScore(error[i],tol[i]));}++cov_sp7mr9u21.s[577];return score;}else{++cov_sp7mr9u21.b[59][1];++cov_sp7mr9u21.s[578];return 0;}}};/** The Hamming distance between two arrays.

        @param {Array} a1 First array.
        @param {Array} a2 Second array.
        @return {Number} The number of elements that differ between a1 and a2.
    */++cov_sp7mr9u21.s[579];PrairieGeom.prototype.hammingDistance=function(a1,a2){++cov_sp7mr9u21.f[126];var n=(++cov_sp7mr9u21.s[580],Math.max(a1.length,a2.length)-Math.min(a1.length,a2.length));++cov_sp7mr9u21.s[581];for(var i=0;i<Math.min(a1.length,a2.length);i++){++cov_sp7mr9u21.s[582];if(a1[i]!=a2[i]){++cov_sp7mr9u21.b[61][0];++cov_sp7mr9u21.s[583];n++;}else{++cov_sp7mr9u21.b[61][1];}}++cov_sp7mr9u21.s[584];return n;};/** Compute a score from the difference between two boolean arrays. Guessing all true or all false will give zero.

        @param {Array} trueVals The array of true booleans.
        @param {Array} submittedVals The array of submitted booleans.
        @return {Number} The score (1 = no error, 0 = worse than guessing all true or all false).
    */++cov_sp7mr9u21.s[585];PrairieGeom.prototype.hammingScore=function(trueVals,submittedVals){++cov_sp7mr9u21.f[127];var nTrue=(++cov_sp7mr9u21.s[586],0),nFalse=(++cov_sp7mr9u21.s[587],0),nWrong=(++cov_sp7mr9u21.s[588],0);++cov_sp7mr9u21.s[589];for(var i=0;i<trueVals.length;i++){++cov_sp7mr9u21.s[590];if(trueVals[i]){++cov_sp7mr9u21.b[62][0];++cov_sp7mr9u21.s[591];nTrue++;}else{++cov_sp7mr9u21.b[62][1];++cov_sp7mr9u21.s[592];nFalse++;}++cov_sp7mr9u21.s[593];if(trueVals[i]!==submittedVals[i]){++cov_sp7mr9u21.b[63][0];++cov_sp7mr9u21.s[594];nWrong++;}else{++cov_sp7mr9u21.b[63][1];}}var nWorst=(++cov_sp7mr9u21.s[595],Math.max(1,Math.min(nTrue,nFalse)));var score=(++cov_sp7mr9u21.s[596],Math.max(0,nWorst-nWrong)/nWorst);++cov_sp7mr9u21.s[597];return score;};/** Compute the L2 norm of an object (Number, Boolean, Array, Vector, Object).

        @param {Object} val The object value.
        @return {Number} The L2 norm of the value.
    */++cov_sp7mr9u21.s[598];PrairieGeom.prototype.norm=function(val){++cov_sp7mr9u21.f[128];var that=(++cov_sp7mr9u21.s[599],this);++cov_sp7mr9u21.s[600];if(_.isFinite(val)){++cov_sp7mr9u21.b[64][0];++cov_sp7mr9u21.s[601];return Math.abs(val);}else{++cov_sp7mr9u21.b[64][1];++cov_sp7mr9u21.s[602];if(_.isArray(val)){++cov_sp7mr9u21.b[65][0];++cov_sp7mr9u21.s[603];return numeric.norm2(_(val).map(function(v){++cov_sp7mr9u21.f[129];++cov_sp7mr9u21.s[604];return that.norm(v);}));}else{++cov_sp7mr9u21.b[65][1];++cov_sp7mr9u21.s[605];if(val instanceof Sylvester.Vector){++cov_sp7mr9u21.b[66][0];++cov_sp7mr9u21.s[606];return val.modulus();}else{++cov_sp7mr9u21.b[66][1];++cov_sp7mr9u21.s[607];if(_.isObject(val)){++cov_sp7mr9u21.b[67][0];++cov_sp7mr9u21.s[608];if(!_.isObject(submittedVal)){++cov_sp7mr9u21.b[68][0];++cov_sp7mr9u21.s[609];return false;}else{++cov_sp7mr9u21.b[68][1];}++cov_sp7mr9u21.s[610];return numeric.norm2(_(val).map(function(v){++cov_sp7mr9u21.f[130];++cov_sp7mr9u21.s[611];return that.norm(v);}));}else{++cov_sp7mr9u21.b[67][1];++cov_sp7mr9u21.s[612];return Infinity;}}}}};/** Compute the absolute error between two objects (Numbers, Booleans, Arrays, Vectors, Objects).

        @param {Object} trueVal The true object value.
        @param {Object} submittedVal The submitted object value.
        @return {Number} The absolute L2 error between trueVal and submittedVal.
    */++cov_sp7mr9u21.s[613];PrairieGeom.prototype.absError=function(trueVal,submittedVal){++cov_sp7mr9u21.f[131];var that=(++cov_sp7mr9u21.s[614],this);var subVal;++cov_sp7mr9u21.s[615];if(_.isFinite(trueVal)){++cov_sp7mr9u21.b[69][0];++cov_sp7mr9u21.s[616];subVal=Number(submittedVal);++cov_sp7mr9u21.s[617];return Math.abs(trueVal-subVal);}else{++cov_sp7mr9u21.b[69][1];++cov_sp7mr9u21.s[618];if(_.isBoolean(trueVal)){++cov_sp7mr9u21.b[70][0];++cov_sp7mr9u21.s[619];if(_.isBoolean(submittedVal)){++cov_sp7mr9u21.b[71][0];++cov_sp7mr9u21.s[620];subVal=submittedVal;}else{++cov_sp7mr9u21.b[71][1];++cov_sp7mr9u21.s[621];if(_.isString(submittedVal)){++cov_sp7mr9u21.b[72][0];++cov_sp7mr9u21.s[622];subVal=this.toBool(submittedVal);}else{++cov_sp7mr9u21.b[72][1];++cov_sp7mr9u21.s[623];return Infinity;}}++cov_sp7mr9u21.s[624];return trueVal===subVal?(++cov_sp7mr9u21.b[73][0],0):(++cov_sp7mr9u21.b[73][1],Infinity);}else{++cov_sp7mr9u21.b[70][1];++cov_sp7mr9u21.s[625];if(_.isString(trueVal)){++cov_sp7mr9u21.b[74][0];++cov_sp7mr9u21.s[626];subVal=String(submittedVal);++cov_sp7mr9u21.s[627];return trueVal===subVal?(++cov_sp7mr9u21.b[75][0],0):(++cov_sp7mr9u21.b[75][1],Infinity);}else{++cov_sp7mr9u21.b[74][1];++cov_sp7mr9u21.s[628];if(_.isArray(trueVal)){++cov_sp7mr9u21.b[76][0];++cov_sp7mr9u21.s[629];if(!_.isArray(submittedVal)){++cov_sp7mr9u21.b[77][0];++cov_sp7mr9u21.s[630];return Infinity;}else{++cov_sp7mr9u21.b[77][1];}++cov_sp7mr9u21.s[631];if(!trueVal.length===submittedVal.length){++cov_sp7mr9u21.b[78][0];++cov_sp7mr9u21.s[632];return Infinity;}else{++cov_sp7mr9u21.b[78][1];}++cov_sp7mr9u21.s[633];return numeric.norm2(_(_.zip(trueVal,submittedVal)).map(function(v){++cov_sp7mr9u21.f[132];++cov_sp7mr9u21.s[634];return that.absError(v[0],v[1]);}));}else{++cov_sp7mr9u21.b[76][1];++cov_sp7mr9u21.s[635];if(trueVal instanceof Sylvester.Vector){++cov_sp7mr9u21.b[79][0];++cov_sp7mr9u21.s[636];subVal=submittedVal;++cov_sp7mr9u21.s[637];if(_.isArray(subVal)){++cov_sp7mr9u21.b[80][0];++cov_sp7mr9u21.s[638];subVal=$V(subVal);}else{++cov_sp7mr9u21.b[80][1];}++cov_sp7mr9u21.s[639];if(!(subVal instanceof Sylvester.Vector)){++cov_sp7mr9u21.b[81][0];++cov_sp7mr9u21.s[640];return Infinity;}else{++cov_sp7mr9u21.b[81][1];}++cov_sp7mr9u21.s[641];return trueVal.subtract(subVal).modulus();}else{++cov_sp7mr9u21.b[79][1];++cov_sp7mr9u21.s[642];if(_.isObject(trueVal)){++cov_sp7mr9u21.b[82][0];++cov_sp7mr9u21.s[643];if(!_.isObject(submittedVal)){++cov_sp7mr9u21.b[83][0];++cov_sp7mr9u21.s[644];return Infinity;}else{++cov_sp7mr9u21.b[83][1];}++cov_sp7mr9u21.s[645];return numeric.norm2(_(trueVal).map(function(val,key){++cov_sp7mr9u21.f[133];++cov_sp7mr9u21.s[646];return that.absError(val,submittedVal[key]);}));}else{++cov_sp7mr9u21.b[82][1];++cov_sp7mr9u21.s[647];return Infinity;}}}}}}};/** Compute the relative error between two objects (Numbers, Arrays, Vectors, Objects).

        @param {Object} trueVal The true object value.
        @param {Object} submittedVal The submitted object value.
        @return {Number} The relative L2 error between trueVal and submittedVal.
    */++cov_sp7mr9u21.s[648];PrairieGeom.prototype.relError=function(trueVal,submittedVal){++cov_sp7mr9u21.f[134];var absError=(++cov_sp7mr9u21.s[649],this.absError(trueVal,submittedVal));var norm=(++cov_sp7mr9u21.s[650],this.norm(trueVal));++cov_sp7mr9u21.s[651];if(norm===0){++cov_sp7mr9u21.b[84][0];++cov_sp7mr9u21.s[652];if(absError===0){++cov_sp7mr9u21.b[85][0];++cov_sp7mr9u21.s[653];return 0;}else{++cov_sp7mr9u21.b[85][1];++cov_sp7mr9u21.s[654];return Infinity;}}else{++cov_sp7mr9u21.b[84][1];}++cov_sp7mr9u21.s[655];return absError/norm;};/** Check whether two objects (Numbers, Booleans, Strings, Arrays, Vectors, Objects) are equal to within the given tolerances.

        @param {Object} trueVal The true object value.
        @param {Object} submittedVal The submitted object value.
        @param {Number} relTol The relative tolerance (for numerical comparisons).
        @param {Number} absTol The absolute tolerance (for numerical comparisons).
        @return {Boolean} Whether the objects are equal to within relTol or absTol.
    */++cov_sp7mr9u21.s[656];PrairieGeom.prototype.checkEqual=function(trueVal,submittedVal,relTol,absTol){++cov_sp7mr9u21.f[135];var that=(++cov_sp7mr9u21.s[657],this);var subVal;++cov_sp7mr9u21.s[658];if(_.isFinite(trueVal)){++cov_sp7mr9u21.b[86][0];++cov_sp7mr9u21.s[659];subVal=Number(submittedVal);++cov_sp7mr9u21.s[660];if((++cov_sp7mr9u21.b[88][0],this.relError(trueVal,subVal)<relTol)||(++cov_sp7mr9u21.b[88][1],this.absError(trueVal,subVal)<absTol)){++cov_sp7mr9u21.b[87][0];++cov_sp7mr9u21.s[661];return true;}else{++cov_sp7mr9u21.b[87][1];}++cov_sp7mr9u21.s[662];return false;}else{++cov_sp7mr9u21.b[86][1];++cov_sp7mr9u21.s[663];if(_.isBoolean(trueVal)){++cov_sp7mr9u21.b[89][0];++cov_sp7mr9u21.s[664];if(_.isBoolean(submittedVal)){++cov_sp7mr9u21.b[90][0];++cov_sp7mr9u21.s[665];subVal=submittedVal;}else{++cov_sp7mr9u21.b[90][1];++cov_sp7mr9u21.s[666];if(_.isString(submittedVal)){++cov_sp7mr9u21.b[91][0];++cov_sp7mr9u21.s[667];subVal=this.toBool(submittedVal);}else{++cov_sp7mr9u21.b[91][1];++cov_sp7mr9u21.s[668];return false;}}++cov_sp7mr9u21.s[669];return trueVal===subVal;}else{++cov_sp7mr9u21.b[89][1];++cov_sp7mr9u21.s[670];if(_.isString(trueVal)){++cov_sp7mr9u21.b[92][0];++cov_sp7mr9u21.s[671];subVal=String(submittedVal);++cov_sp7mr9u21.s[672];return trueVal===subVal;}else{++cov_sp7mr9u21.b[92][1];++cov_sp7mr9u21.s[673];if(_.isArray(trueVal)){++cov_sp7mr9u21.b[93][0];++cov_sp7mr9u21.s[674];if(!_.isArray(submittedVal)){++cov_sp7mr9u21.b[94][0];++cov_sp7mr9u21.s[675];return false;}else{++cov_sp7mr9u21.b[94][1];}++cov_sp7mr9u21.s[676];if(!trueVal.length===submittedVal.length){++cov_sp7mr9u21.b[95][0];++cov_sp7mr9u21.s[677];return false;}else{++cov_sp7mr9u21.b[95][1];}++cov_sp7mr9u21.s[678];if((++cov_sp7mr9u21.b[97][0],this.relError(trueVal,submittedVal)<relTol)||(++cov_sp7mr9u21.b[97][1],this.absError(trueVal,submittedVal)<absTol)){++cov_sp7mr9u21.b[96][0];++cov_sp7mr9u21.s[679];return true;}else{++cov_sp7mr9u21.b[96][1];}++cov_sp7mr9u21.s[680];return false;}else{++cov_sp7mr9u21.b[93][1];++cov_sp7mr9u21.s[681];if(trueVal instanceof Sylvester.Vector){++cov_sp7mr9u21.b[98][0];++cov_sp7mr9u21.s[682];subVal=submittedVal;++cov_sp7mr9u21.s[683];if(_.isArray(subVal)){++cov_sp7mr9u21.b[99][0];++cov_sp7mr9u21.s[684];subVal=$V(subVal);}else{++cov_sp7mr9u21.b[99][1];}++cov_sp7mr9u21.s[685];if(!(subVal instanceof Sylvester.Vector)){++cov_sp7mr9u21.b[100][0];++cov_sp7mr9u21.s[686];return false;}else{++cov_sp7mr9u21.b[100][1];}++cov_sp7mr9u21.s[687];if((++cov_sp7mr9u21.b[102][0],this.relError(trueVal,subVal)<relTol)||(++cov_sp7mr9u21.b[102][1],this.absError(trueVal,subVal)<absTol)){++cov_sp7mr9u21.b[101][0];++cov_sp7mr9u21.s[688];return true;}else{++cov_sp7mr9u21.b[101][1];}++cov_sp7mr9u21.s[689];return false;}else{++cov_sp7mr9u21.b[98][1];++cov_sp7mr9u21.s[690];if(_.isObject(trueVal)){++cov_sp7mr9u21.b[103][0];++cov_sp7mr9u21.s[691];if(!_.isObject(submittedVal)){++cov_sp7mr9u21.b[104][0];++cov_sp7mr9u21.s[692];return false;}else{++cov_sp7mr9u21.b[104][1];}++cov_sp7mr9u21.s[693];return _(trueVal).every(function(val,key){++cov_sp7mr9u21.f[136];++cov_sp7mr9u21.s[694];return that.checkEqual(val,submittedVal[key],relTol,absTol);});}else{++cov_sp7mr9u21.b[103][1];++cov_sp7mr9u21.s[695];return false;}}}}}}};/*****************************************************************************/++cov_sp7mr9u21.s[696];return new PrairieGeom();});})(requirejsVars.require,requirejsVars.requirejs,requirejsVars.define);