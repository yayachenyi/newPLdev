var cov_1ww652lxcy=function(){var path='/Users/fengyichen/pldev/newfolder/PrairieLearn/lib/config.js',hash='6b056bae346a67e39b1ae4cfdb9ebdae918fc7a0',global=new Function('return this')(),gcv='__coverage__',coverageData={path:'/Users/fengyichen/pldev/newfolder/PrairieLearn/lib/config.js',statementMap:{'0':{start:{line:1,column:8},end:{line:1,column:25}},'1':{start:{line:2,column:9},end:{line:2,column:22}},'2':{start:{line:3,column:13},end:{line:3,column:32}},'3':{start:{line:4,column:15},end:{line:4,column:37}},'4':{start:{line:6,column:13},end:{line:6,column:27}},'5':{start:{line:9,column:0},end:{line:9,column:26}},'6':{start:{line:10,column:0},end:{line:10,column:52}},'7':{start:{line:11,column:0},end:{line:11,column:35}},'8':{start:{line:12,column:0},end:{line:12,column:33}},'9':{start:{line:13,column:0},end:{line:13,column:39}},'10':{start:{line:14,column:0},end:{line:14,column:36}},'11':{start:{line:15,column:0},end:{line:15,column:26}},'12':{start:{line:16,column:0},end:{line:16,column:34}},'13':{start:{line:17,column:0},end:{line:17,column:32}},'14':{start:{line:18,column:0},end:{line:18,column:34}},'15':{start:{line:19,column:0},end:{line:19,column:25}},'16':{start:{line:20,column:0},end:{line:20,column:27}},'17':{start:{line:21,column:0},end:{line:21,column:27}},'18':{start:{line:22,column:0},end:{line:22,column:48}},'19':{start:{line:23,column:0},end:{line:23,column:51}},'20':{start:{line:24,column:0},end:{line:24,column:45}},'21':{start:{line:25,column:0},end:{line:25,column:34}},'22':{start:{line:26,column:0},end:{line:26,column:34}},'23':{start:{line:27,column:0},end:{line:27,column:68}},'24':{start:{line:28,column:0},end:{line:28,column:44}},'25':{start:{line:29,column:0},end:{line:29,column:40}},'26':{start:{line:30,column:0},end:{line:30,column:37}},'27':{start:{line:31,column:0},end:{line:31,column:47}},'28':{start:{line:32,column:0},end:{line:32,column:60}},'29':{start:{line:33,column:0},end:{line:33,column:40}},'30':{start:{line:34,column:0},end:{line:34,column:42}},'31':{start:{line:35,column:0},end:{line:35,column:50}},'32':{start:{line:37,column:14},end:{line:111,column:1}},'33':{start:{line:113,column:0},end:{line:113,column:24}},'34':{start:{line:115,column:0},end:{line:122,column:2}},'35':{start:{line:116,column:4},end:{line:121,column:5}},'36':{start:{line:117,column:25},end:{line:117,column:86}},'37':{start:{line:118,column:8},end:{line:118,column:37}},'38':{start:{line:120,column:8},end:{line:120,column:70}}},fnMap:{'0':{name:'(anonymous_0)',decl:{start:{line:115,column:20},end:{line:115,column:21}},loc:{start:{line:115,column:35},end:{line:122,column:1}},line:115}},branchMap:{'0':{loc:{start:{line:116,column:4},end:{line:121,column:5}},type:'if',locations:[{start:{line:116,column:4},end:{line:121,column:5}},{start:{line:116,column:4},end:{line:121,column:5}}],line:116}},s:{'0':0,'1':0,'2':0,'3':0,'4':0,'5':0,'6':0,'7':0,'8':0,'9':0,'10':0,'11':0,'12':0,'13':0,'14':0,'15':0,'16':0,'17':0,'18':0,'19':0,'20':0,'21':0,'22':0,'23':0,'24':0,'25':0,'26':0,'27':0,'28':0,'29':0,'30':0,'31':0,'32':0,'33':0,'34':0,'35':0,'36':0,'37':0,'38':0},f:{'0':0},b:{'0':[0,0]},_coverageSchema:'332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();var _=(++cov_1ww652lxcy.s[0],require('lodash'));var fs=(++cov_1ww652lxcy.s[1],require('fs'));var logger=(++cov_1ww652lxcy.s[2],require('./logger'));var jsonLoad=(++cov_1ww652lxcy.s[3],require('./json-load'));var config=(++cov_1ww652lxcy.s[4],module.exports);// defaults - can be overridden in config.json
++cov_1ww652lxcy.s[5];config.startServer=true;++cov_1ww652lxcy.s[6];config.dbAddress='mongodb://localhost:27017/data';++cov_1ww652lxcy.s[7];config.postgresqlUser='postgres';++cov_1ww652lxcy.s[8];config.postgresqlPassword=null;++cov_1ww652lxcy.s[9];config.postgresqlDatabase='postgres';++cov_1ww652lxcy.s[10];config.postgresqlHost='localhost';++cov_1ww652lxcy.s[11];config.amqpAddress=null;++cov_1ww652lxcy.s[12];config.amqpResultQueue='result';++cov_1ww652lxcy.s[13];config.amqpStartQueue='start';++cov_1ww652lxcy.s[14];config.logFilename='server.log';++cov_1ww652lxcy.s[15];config.authType='none';++cov_1ww652lxcy.s[16];config.serverType='http';++cov_1ww652lxcy.s[17];config.serverPort='3000';++cov_1ww652lxcy.s[18];config.cronIntervalAutoFinishExamsSec=10*60;++cov_1ww652lxcy.s[19];config.cronIntervalErrorAbandonedJobsSec=10*60;++cov_1ww652lxcy.s[20];config.cronIntervalExternalGraderLoadSec=8;++cov_1ww652lxcy.s[21];config.cronDailySec=8*60*60;++cov_1ww652lxcy.s[22];config.autoFinishAgeMins=6*60;++cov_1ww652lxcy.s[23];config.questionDefaultsDir='question-servers/default-calculation';++cov_1ww652lxcy.s[24];config.secretKey='THIS_IS_THE_SECRET_KEY';// override in config.json
++cov_1ww652lxcy.s[25];config.secretSlackOpsBotEndpoint=null;// override in config.json
++cov_1ww652lxcy.s[26];config.externalGradingUseAws=false;++cov_1ww652lxcy.s[27];config.externalGradingSqsQueueName='grading';++cov_1ww652lxcy.s[28];config.externalGradingS3Bucket='prairielearn.dev.grading';++cov_1ww652lxcy.s[29];config.externalGradingWebhookUrl=null;++cov_1ww652lxcy.s[30];config.externalGradingDefaultTimeout=30;// in seconds
++cov_1ww652lxcy.s[31];config.externalGradingLoadAverageIntervalSec=30;const azure=(++cov_1ww652lxcy.s[32],{// Required
azureIdentityMetadata:'https://login.microsoftonline.com/common/.well-known/openid-configuration',// azureIdentityMetadata: 'https://login.microsoftonline.com/<tenant_name>.onmicrosoft.com/.well-known/openid-configuration',
// or equivalently: 'https://login.microsoftonline.com/<tenant_guid>/.well-known/openid-configuration'
//
// or you can use the common endpoint
// 'https://login.microsoftonline.com/common/.well-known/openid-configuration'
// To use the common endpoint, you have to either set `validateIssuer` to false, or provide the `issuer` value.
// Required, the client ID of your app in AAD
azureClientID:'<your_client_id>',// Required, must be 'code', 'code id_token', 'id_token code' or 'id_token'
azureResponseType:'code id_token',// Required
azureResponseMode:'form_post',// Required, the reply URL registered in AAD for your app
azureRedirectUrl:'http://localhost:3000/auth/openid/return',// Required if we use http for redirectUrl
azureAllowHttpForRedirectUrl:false,// Required if `responseType` is 'code', 'id_token code' or 'code id_token'.
// If app key contains '\', replace it with '\\'.
azureClientSecret:'<your_client_secret>',// Required to set to false if you don't want to validate issuer
azureValidateIssuer:false,// Required if you want to provide the issuer(s) you want to validate instead of using the issuer from metadata
azureIssuer:null,// Required to set to true if the `verify` function has 'req' as the first parameter
azurePassReqToCallback:false,// Recommended to set to true. By default we save state in express session, if this option is set to true, then
// we encrypt state and save it in cookie instead. This option together with { session: false } allows your app
// to be completely express session free.
azureUseCookieInsteadOfSession:true,// Required if `useCookieInsteadOfSession` is set to true. You can provide multiple set of key/iv pairs for key
// rollover purpose. We always use the first set of key/iv pair to encrypt cookie, but we will try every set of
// key/iv pair to decrypt cookie. Key can be any string of length 32, and iv can be any string of length 12.
azureCookieEncryptionKeys:[{'key':'12345678901234567890123456789012','iv':'123456789012'},{'key':'abcdefghijklmnopqrstuvwxyzabcdef','iv':'abcdefghijkl'}],// Optional. The additional scope you want besides 'openid', for example: ['email', 'profile'].
azureScope:null,// Optional, 'error', 'warn' or 'info'
azureLoggingLevel:'warn',// Optional. The lifetime of nonce in session or cookie, the default value is 3600 (seconds).
azureNonceLifetime:null,// Optional. The max amount of nonce saved in session or cookie, the default value is 10.
azureNonceMaxAmount:5,// Optional. The clock skew allowed in token validation, the default value is 300 seconds.
azureClockSkew:null,// Optional.
// If you want to get access_token for a specific resource, you can provide the resource here; otherwise,
// set the value to null.
// Note that in order to get access_token, the responseType must be 'code', 'code id_token' or 'id_token code'.
azureResourceURL:'https://graph.windows.net',// The url you need to go to destroy the session with AAD
azureDestroySessionUrl:'https://login.microsoftonline.com/common/oauth2/logout?post_logout_redirect_uri=http://localhost:3000'});++cov_1ww652lxcy.s[33];_.assign(config,azure);++cov_1ww652lxcy.s[34];config.loadConfig=function(file){++cov_1ww652lxcy.f[0];++cov_1ww652lxcy.s[35];if(fs.existsSync(file)){++cov_1ww652lxcy.b[0][0];let fileConfig=(++cov_1ww652lxcy.s[36],jsonLoad.readJSONSyncOrDie(file,'schemas/serverConfig.json'));++cov_1ww652lxcy.s[37];_.assign(config,fileConfig);}else{++cov_1ww652lxcy.b[0][1];++cov_1ww652lxcy.s[38];logger.warn(file+' not found, using default configuration');}};